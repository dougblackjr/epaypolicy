<?php
/**
 * QuickQuoteModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tns\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * epay3 API 1.0
 *
 * This API supports the processing of credit card and eCheck/ACH payments.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@epay3.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tns\EpayPolicy\Model;

use \ArrayAccess;
use \Tns\EpayPolicy\ObjectSerializer;

/**
 * QuickQuoteModel Class Doc Comment
 *
 * @category Class
 * @package  Tns\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QuickQuoteModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'QuickQuoteModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'invoice_id' => 'string',
        'is_eligible' => 'bool',
        'down_payment' => 'float',
        'finance_ineligibility_reason' => 'string',
        'number_of_installments' => 'int',
        'installment_amount' => 'float',
        'exception' => '\Tns\EpayPolicy\Model\SerializableException',
        'finance_eligibility_hash' => 'string',
        'finance_company_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'invoice_id' => null,
        'is_eligible' => null,
        'down_payment' => 'double',
        'finance_ineligibility_reason' => null,
        'number_of_installments' => 'int32',
        'installment_amount' => 'double',
        'exception' => null,
        'finance_eligibility_hash' => null,
        'finance_company_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'invoice_id' => false,
        'is_eligible' => false,
        'down_payment' => false,
        'finance_ineligibility_reason' => false,
        'number_of_installments' => false,
        'installment_amount' => false,
        'exception' => false,
        'finance_eligibility_hash' => false,
        'finance_company_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_id' => 'invoiceId',
        'is_eligible' => 'isEligible',
        'down_payment' => 'downPayment',
        'finance_ineligibility_reason' => 'financeIneligibilityReason',
        'number_of_installments' => 'numberOfInstallments',
        'installment_amount' => 'installmentAmount',
        'exception' => 'exception',
        'finance_eligibility_hash' => 'financeEligibilityHash',
        'finance_company_name' => 'financeCompanyName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_id' => 'setInvoiceId',
        'is_eligible' => 'setIsEligible',
        'down_payment' => 'setDownPayment',
        'finance_ineligibility_reason' => 'setFinanceIneligibilityReason',
        'number_of_installments' => 'setNumberOfInstallments',
        'installment_amount' => 'setInstallmentAmount',
        'exception' => 'setException',
        'finance_eligibility_hash' => 'setFinanceEligibilityHash',
        'finance_company_name' => 'setFinanceCompanyName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_id' => 'getInvoiceId',
        'is_eligible' => 'getIsEligible',
        'down_payment' => 'getDownPayment',
        'finance_ineligibility_reason' => 'getFinanceIneligibilityReason',
        'number_of_installments' => 'getNumberOfInstallments',
        'installment_amount' => 'getInstallmentAmount',
        'exception' => 'getException',
        'finance_eligibility_hash' => 'getFinanceEligibilityHash',
        'finance_company_name' => 'getFinanceCompanyName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('invoice_id', $data ?? [], null);
        $this->setIfExists('is_eligible', $data ?? [], null);
        $this->setIfExists('down_payment', $data ?? [], null);
        $this->setIfExists('finance_ineligibility_reason', $data ?? [], null);
        $this->setIfExists('number_of_installments', $data ?? [], null);
        $this->setIfExists('installment_amount', $data ?? [], null);
        $this->setIfExists('exception', $data ?? [], null);
        $this->setIfExists('finance_eligibility_hash', $data ?? [], null);
        $this->setIfExists('finance_company_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice_id
     *
     * @return string|null
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param string|null $invoice_id invoice_id
     *
     * @return self
     */
    public function setInvoiceId($invoice_id)
    {
        if (is_null($invoice_id)) {
            throw new \InvalidArgumentException('non-nullable invoice_id cannot be null');
        }
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets is_eligible
     *
     * @return bool|null
     */
    public function getIsEligible()
    {
        return $this->container['is_eligible'];
    }

    /**
     * Sets is_eligible
     *
     * @param bool|null $is_eligible is_eligible
     *
     * @return self
     */
    public function setIsEligible($is_eligible)
    {
        if (is_null($is_eligible)) {
            throw new \InvalidArgumentException('non-nullable is_eligible cannot be null');
        }
        $this->container['is_eligible'] = $is_eligible;

        return $this;
    }

    /**
     * Gets down_payment
     *
     * @return float|null
     */
    public function getDownPayment()
    {
        return $this->container['down_payment'];
    }

    /**
     * Sets down_payment
     *
     * @param float|null $down_payment down_payment
     *
     * @return self
     */
    public function setDownPayment($down_payment)
    {
        if (is_null($down_payment)) {
            throw new \InvalidArgumentException('non-nullable down_payment cannot be null');
        }
        $this->container['down_payment'] = $down_payment;

        return $this;
    }

    /**
     * Gets finance_ineligibility_reason
     *
     * @return string|null
     */
    public function getFinanceIneligibilityReason()
    {
        return $this->container['finance_ineligibility_reason'];
    }

    /**
     * Sets finance_ineligibility_reason
     *
     * @param string|null $finance_ineligibility_reason finance_ineligibility_reason
     *
     * @return self
     */
    public function setFinanceIneligibilityReason($finance_ineligibility_reason)
    {
        if (is_null($finance_ineligibility_reason)) {
            throw new \InvalidArgumentException('non-nullable finance_ineligibility_reason cannot be null');
        }
        $this->container['finance_ineligibility_reason'] = $finance_ineligibility_reason;

        return $this;
    }

    /**
     * Gets number_of_installments
     *
     * @return int|null
     */
    public function getNumberOfInstallments()
    {
        return $this->container['number_of_installments'];
    }

    /**
     * Sets number_of_installments
     *
     * @param int|null $number_of_installments number_of_installments
     *
     * @return self
     */
    public function setNumberOfInstallments($number_of_installments)
    {
        if (is_null($number_of_installments)) {
            throw new \InvalidArgumentException('non-nullable number_of_installments cannot be null');
        }
        $this->container['number_of_installments'] = $number_of_installments;

        return $this;
    }

    /**
     * Gets installment_amount
     *
     * @return float|null
     */
    public function getInstallmentAmount()
    {
        return $this->container['installment_amount'];
    }

    /**
     * Sets installment_amount
     *
     * @param float|null $installment_amount installment_amount
     *
     * @return self
     */
    public function setInstallmentAmount($installment_amount)
    {
        if (is_null($installment_amount)) {
            throw new \InvalidArgumentException('non-nullable installment_amount cannot be null');
        }
        $this->container['installment_amount'] = $installment_amount;

        return $this;
    }

    /**
     * Gets exception
     *
     * @return \Tns\EpayPolicy\Model\SerializableException|null
     */
    public function getException()
    {
        return $this->container['exception'];
    }

    /**
     * Sets exception
     *
     * @param \Tns\EpayPolicy\Model\SerializableException|null $exception exception
     *
     * @return self
     */
    public function setException($exception)
    {
        if (is_null($exception)) {
            throw new \InvalidArgumentException('non-nullable exception cannot be null');
        }
        $this->container['exception'] = $exception;

        return $this;
    }

    /**
     * Gets finance_eligibility_hash
     *
     * @return string|null
     */
    public function getFinanceEligibilityHash()
    {
        return $this->container['finance_eligibility_hash'];
    }

    /**
     * Sets finance_eligibility_hash
     *
     * @param string|null $finance_eligibility_hash finance_eligibility_hash
     *
     * @return self
     */
    public function setFinanceEligibilityHash($finance_eligibility_hash)
    {
        if (is_null($finance_eligibility_hash)) {
            throw new \InvalidArgumentException('non-nullable finance_eligibility_hash cannot be null');
        }
        $this->container['finance_eligibility_hash'] = $finance_eligibility_hash;

        return $this;
    }

    /**
     * Gets finance_company_name
     *
     * @return string|null
     */
    public function getFinanceCompanyName()
    {
        return $this->container['finance_company_name'];
    }

    /**
     * Sets finance_company_name
     *
     * @param string|null $finance_company_name finance_company_name
     *
     * @return self
     */
    public function setFinanceCompanyName($finance_company_name)
    {
        if (is_null($finance_company_name)) {
            throw new \InvalidArgumentException('non-nullable finance_company_name cannot be null');
        }
        $this->container['finance_company_name'] = $finance_company_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


