<?php
/**
 * GetTransactionResponseModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tns\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * epay3 API 1.0
 *
 * This API supports the processing of credit card and eCheck/ACH payments.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@epay3.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tns\EpayPolicy\Model;

use \ArrayAccess;
use \Tns\EpayPolicy\ObjectSerializer;

/**
 * GetTransactionResponseModel Class Doc Comment
 *
 * @category Class
 * @description Provides details of a transaction.
 * @package  Tns\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetTransactionResponseModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetTransactionResponseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'public_id' => 'string',
        'payer' => 'string',
        'email_address' => 'string',
        'transaction_type' => 'string',
        'amount' => 'float',
        'fee' => 'float',
        'payer_fee' => 'float',
        'masked_account_number' => 'string',
        'comments' => 'string',
        'original_transaction_id' => 'int',
        'events' => '\Tns\EpayPolicy\Model\TransactionEventModel[]',
        'attribute_values' => '\Tns\EpayPolicy\Model\AttributeValueModel[]',
        'attachments' => '\Tns\EpayPolicy\Model\AttachmentModel[]',
        'paid_invoices' => '\Tns\EpayPolicy\Model\PaidInvoiceModel[]',
        'financing_account' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'public_id' => null,
        'payer' => null,
        'email_address' => null,
        'transaction_type' => null,
        'amount' => 'double',
        'fee' => 'double',
        'payer_fee' => 'double',
        'masked_account_number' => null,
        'comments' => null,
        'original_transaction_id' => 'int64',
        'events' => null,
        'attribute_values' => null,
        'attachments' => null,
        'paid_invoices' => null,
        'financing_account' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'public_id' => false,
        'payer' => false,
        'email_address' => false,
        'transaction_type' => false,
        'amount' => false,
        'fee' => false,
        'payer_fee' => false,
        'masked_account_number' => false,
        'comments' => false,
        'original_transaction_id' => false,
        'events' => false,
        'attribute_values' => false,
        'attachments' => false,
        'paid_invoices' => false,
        'financing_account' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'public_id' => 'publicId',
        'payer' => 'payer',
        'email_address' => 'emailAddress',
        'transaction_type' => 'transactionType',
        'amount' => 'amount',
        'fee' => 'fee',
        'payer_fee' => 'payerFee',
        'masked_account_number' => 'maskedAccountNumber',
        'comments' => 'comments',
        'original_transaction_id' => 'originalTransactionId',
        'events' => 'events',
        'attribute_values' => 'attributeValues',
        'attachments' => 'attachments',
        'paid_invoices' => 'paidInvoices',
        'financing_account' => 'financingAccount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'public_id' => 'setPublicId',
        'payer' => 'setPayer',
        'email_address' => 'setEmailAddress',
        'transaction_type' => 'setTransactionType',
        'amount' => 'setAmount',
        'fee' => 'setFee',
        'payer_fee' => 'setPayerFee',
        'masked_account_number' => 'setMaskedAccountNumber',
        'comments' => 'setComments',
        'original_transaction_id' => 'setOriginalTransactionId',
        'events' => 'setEvents',
        'attribute_values' => 'setAttributeValues',
        'attachments' => 'setAttachments',
        'paid_invoices' => 'setPaidInvoices',
        'financing_account' => 'setFinancingAccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'public_id' => 'getPublicId',
        'payer' => 'getPayer',
        'email_address' => 'getEmailAddress',
        'transaction_type' => 'getTransactionType',
        'amount' => 'getAmount',
        'fee' => 'getFee',
        'payer_fee' => 'getPayerFee',
        'masked_account_number' => 'getMaskedAccountNumber',
        'comments' => 'getComments',
        'original_transaction_id' => 'getOriginalTransactionId',
        'events' => 'getEvents',
        'attribute_values' => 'getAttributeValues',
        'attachments' => 'getAttachments',
        'paid_invoices' => 'getPaidInvoices',
        'financing_account' => 'getFinancingAccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TRANSACTION_TYPE_ACH = 'Ach';
    public const TRANSACTION_TYPE_VISA = 'Visa';
    public const TRANSACTION_TYPE_MASTER_CARD = 'MasterCard';
    public const TRANSACTION_TYPE_DISCOVER = 'Discover';
    public const TRANSACTION_TYPE_AMERICAN_EXPRESS = 'AmericanExpress';
    public const TRANSACTION_TYPE_JCB = 'Jcb';
    public const TRANSACTION_TYPE_PAPER_CHECK = 'PaperCheck';
    public const TRANSACTION_TYPE_LOCKBOX_CHECK = 'LockboxCheck';
    public const TRANSACTION_TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionTypeAllowableValues()
    {
        return [
            self::TRANSACTION_TYPE_ACH,
            self::TRANSACTION_TYPE_VISA,
            self::TRANSACTION_TYPE_MASTER_CARD,
            self::TRANSACTION_TYPE_DISCOVER,
            self::TRANSACTION_TYPE_AMERICAN_EXPRESS,
            self::TRANSACTION_TYPE_JCB,
            self::TRANSACTION_TYPE_PAPER_CHECK,
            self::TRANSACTION_TYPE_LOCKBOX_CHECK,
            self::TRANSACTION_TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('public_id', $data ?? [], null);
        $this->setIfExists('payer', $data ?? [], null);
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('transaction_type', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('fee', $data ?? [], null);
        $this->setIfExists('payer_fee', $data ?? [], null);
        $this->setIfExists('masked_account_number', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('original_transaction_id', $data ?? [], null);
        $this->setIfExists('events', $data ?? [], null);
        $this->setIfExists('attribute_values', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('paid_invoices', $data ?? [], null);
        $this->setIfExists('financing_account', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!is_null($this->container['transaction_type']) && !in_array($this->container['transaction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_type', must be one of '%s'",
                $this->container['transaction_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The Id of the transaction.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets public_id
     *
     * @return string|null
     */
    public function getPublicId()
    {
        return $this->container['public_id'];
    }

    /**
     * Sets public_id
     *
     * @param string|null $public_id The PublicId of the transaction
     *
     * @return self
     */
    public function setPublicId($public_id)
    {
        if (is_null($public_id)) {
            throw new \InvalidArgumentException('non-nullable public_id cannot be null');
        }
        $this->container['public_id'] = $public_id;

        return $this;
    }

    /**
     * Gets payer
     *
     * @return string|null
     */
    public function getPayer()
    {
        return $this->container['payer'];
    }

    /**
     * Sets payer
     *
     * @param string|null $payer The name of the payer.
     *
     * @return self
     */
    public function setPayer($payer)
    {
        if (is_null($payer)) {
            throw new \InvalidArgumentException('non-nullable payer cannot be null');
        }
        $this->container['payer'] = $payer;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address The email address of the payer.
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        if (is_null($email_address)) {
            throw new \InvalidArgumentException('non-nullable email_address cannot be null');
        }
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type The type of the transaction.
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        if (is_null($transaction_type)) {
            throw new \InvalidArgumentException('non-nullable transaction_type cannot be null');
        }
        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!in_array($transaction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transaction_type', must be one of '%s'",
                    $transaction_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The total amount of the transaction that was charged to the payer including all fees.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return float|null
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param float|null $fee The transaction fee charged.
     *
     * @return self
     */
    public function setFee($fee)
    {
        if (is_null($fee)) {
            throw new \InvalidArgumentException('non-nullable fee cannot be null');
        }
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets payer_fee
     *
     * @return float|null
     */
    public function getPayerFee()
    {
        return $this->container['payer_fee'];
    }

    /**
     * Sets payer_fee
     *
     * @param float|null $payer_fee The fee charged to the payer.
     *
     * @return self
     */
    public function setPayerFee($payer_fee)
    {
        if (is_null($payer_fee)) {
            throw new \InvalidArgumentException('non-nullable payer_fee cannot be null');
        }
        $this->container['payer_fee'] = $payer_fee;

        return $this;
    }

    /**
     * Gets masked_account_number
     *
     * @return string|null
     */
    public function getMaskedAccountNumber()
    {
        return $this->container['masked_account_number'];
    }

    /**
     * Sets masked_account_number
     *
     * @param string|null $masked_account_number The masked credit card number or account number used by the payer.
     *
     * @return self
     */
    public function setMaskedAccountNumber($masked_account_number)
    {
        if (is_null($masked_account_number)) {
            throw new \InvalidArgumentException('non-nullable masked_account_number cannot be null');
        }
        $this->container['masked_account_number'] = $masked_account_number;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Comments left by the payer at the initial creation of the transaction.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets original_transaction_id
     *
     * @return int|null
     */
    public function getOriginalTransactionId()
    {
        return $this->container['original_transaction_id'];
    }

    /**
     * Sets original_transaction_id
     *
     * @param int|null $original_transaction_id The ID of the original transaction. Only present on returns, refunds and similarly derivative transactions.
     *
     * @return self
     */
    public function setOriginalTransactionId($original_transaction_id)
    {
        if (is_null($original_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable original_transaction_id cannot be null');
        }
        $this->container['original_transaction_id'] = $original_transaction_id;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \Tns\EpayPolicy\Model\TransactionEventModel[]|null
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \Tns\EpayPolicy\Model\TransactionEventModel[]|null $events A collection of all events that have occurred.
     *
     * @return self
     */
    public function setEvents($events)
    {
        if (is_null($events)) {
            throw new \InvalidArgumentException('non-nullable events cannot be null');
        }
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets attribute_values
     *
     * @return \Tns\EpayPolicy\Model\AttributeValueModel[]|null
     */
    public function getAttributeValues()
    {
        return $this->container['attribute_values'];
    }

    /**
     * Sets attribute_values
     *
     * @param \Tns\EpayPolicy\Model\AttributeValueModel[]|null $attribute_values A collection of key/value pairs for any custom attribute values for this transaction.
     *
     * @return self
     */
    public function setAttributeValues($attribute_values)
    {
        if (is_null($attribute_values)) {
            throw new \InvalidArgumentException('non-nullable attribute_values cannot be null');
        }
        $this->container['attribute_values'] = $attribute_values;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Tns\EpayPolicy\Model\AttachmentModel[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Tns\EpayPolicy\Model\AttachmentModel[]|null $attachments A collection of all attachments for this transaction.
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        if (is_null($attachments)) {
            throw new \InvalidArgumentException('non-nullable attachments cannot be null');
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets paid_invoices
     *
     * @return \Tns\EpayPolicy\Model\PaidInvoiceModel[]|null
     */
    public function getPaidInvoices()
    {
        return $this->container['paid_invoices'];
    }

    /**
     * Sets paid_invoices
     *
     * @param \Tns\EpayPolicy\Model\PaidInvoiceModel[]|null $paid_invoices A collection of all paid invoices for this transaction.
     *
     * @return self
     */
    public function setPaidInvoices($paid_invoices)
    {
        if (is_null($paid_invoices)) {
            throw new \InvalidArgumentException('non-nullable paid_invoices cannot be null');
        }
        $this->container['paid_invoices'] = $paid_invoices;

        return $this;
    }

    /**
     * Gets financing_account
     *
     * @return string|null
     */
    public function getFinancingAccount()
    {
        return $this->container['financing_account'];
    }

    /**
     * Sets financing_account
     *
     * @param string|null $financing_account financing_account
     *
     * @return self
     */
    public function setFinancingAccount($financing_account)
    {
        if (is_null($financing_account)) {
            throw new \InvalidArgumentException('non-nullable financing_account cannot be null');
        }
        $this->container['financing_account'] = $financing_account;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


