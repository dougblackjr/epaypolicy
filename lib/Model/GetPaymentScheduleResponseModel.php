<?php
/**
 * GetPaymentScheduleResponseModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tns\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * epay3 API 1.0
 *
 * This API supports the processing of credit card and eCheck/ACH payments.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@epay3.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tns\EpayPolicy\Model;

use \ArrayAccess;
use \Tns\EpayPolicy\ObjectSerializer;

/**
 * GetPaymentScheduleResponseModel Class Doc Comment
 *
 * @category Class
 * @description Provides details of a payment schedule.
 * @package  Tns\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetPaymentScheduleResponseModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetPaymentScheduleResponseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'payer' => 'string',
        'email_address' => 'string',
        'token_id' => 'string',
        'number_of_total_payments' => 'int',
        'number_of_executed_payments' => 'int',
        'amount' => 'float',
        'payer_fee' => 'float',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'next_payment_date' => '\DateTime',
        'interval' => 'string',
        'interval_count' => 'int',
        'attribute_values' => 'array<string,string>',
        'comments' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'payer' => null,
        'email_address' => null,
        'token_id' => null,
        'number_of_total_payments' => 'int32',
        'number_of_executed_payments' => 'int32',
        'amount' => 'double',
        'payer_fee' => 'double',
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'next_payment_date' => 'date-time',
        'interval' => null,
        'interval_count' => 'int32',
        'attribute_values' => null,
        'comments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'payer' => false,
        'email_address' => false,
        'token_id' => false,
        'number_of_total_payments' => false,
        'number_of_executed_payments' => false,
        'amount' => false,
        'payer_fee' => false,
        'start_date' => false,
        'end_date' => false,
        'next_payment_date' => false,
        'interval' => false,
        'interval_count' => false,
        'attribute_values' => false,
        'comments' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'payer' => 'payer',
        'email_address' => 'emailAddress',
        'token_id' => 'tokenId',
        'number_of_total_payments' => 'numberOfTotalPayments',
        'number_of_executed_payments' => 'numberOfExecutedPayments',
        'amount' => 'amount',
        'payer_fee' => 'payerFee',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'next_payment_date' => 'nextPaymentDate',
        'interval' => 'interval',
        'interval_count' => 'intervalCount',
        'attribute_values' => 'attributeValues',
        'comments' => 'comments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'payer' => 'setPayer',
        'email_address' => 'setEmailAddress',
        'token_id' => 'setTokenId',
        'number_of_total_payments' => 'setNumberOfTotalPayments',
        'number_of_executed_payments' => 'setNumberOfExecutedPayments',
        'amount' => 'setAmount',
        'payer_fee' => 'setPayerFee',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'next_payment_date' => 'setNextPaymentDate',
        'interval' => 'setInterval',
        'interval_count' => 'setIntervalCount',
        'attribute_values' => 'setAttributeValues',
        'comments' => 'setComments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'payer' => 'getPayer',
        'email_address' => 'getEmailAddress',
        'token_id' => 'getTokenId',
        'number_of_total_payments' => 'getNumberOfTotalPayments',
        'number_of_executed_payments' => 'getNumberOfExecutedPayments',
        'amount' => 'getAmount',
        'payer_fee' => 'getPayerFee',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'next_payment_date' => 'getNextPaymentDate',
        'interval' => 'getInterval',
        'interval_count' => 'getIntervalCount',
        'attribute_values' => 'getAttributeValues',
        'comments' => 'getComments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const INTERVAL_DAY = 'Day';
    public const INTERVAL_WEEK = 'Week';
    public const INTERVAL_MONTH = 'Month';
    public const INTERVAL_YEAR = 'Year';
    public const INTERVAL_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIntervalAllowableValues()
    {
        return [
            self::INTERVAL_DAY,
            self::INTERVAL_WEEK,
            self::INTERVAL_MONTH,
            self::INTERVAL_YEAR,
            self::INTERVAL_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('payer', $data ?? [], null);
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('token_id', $data ?? [], null);
        $this->setIfExists('number_of_total_payments', $data ?? [], null);
        $this->setIfExists('number_of_executed_payments', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('payer_fee', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('next_payment_date', $data ?? [], null);
        $this->setIfExists('interval', $data ?? [], null);
        $this->setIfExists('interval_count', $data ?? [], null);
        $this->setIfExists('attribute_values', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIntervalAllowableValues();
        if (!is_null($this->container['interval']) && !in_array($this->container['interval'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interval', must be one of '%s'",
                $this->container['interval'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The public Id of the payment schedule.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets payer
     *
     * @return string|null
     */
    public function getPayer()
    {
        return $this->container['payer'];
    }

    /**
     * Sets payer
     *
     * @param string|null $payer Name of the payer that is shown on the receipt.
     *
     * @return self
     */
    public function setPayer($payer)
    {
        if (is_null($payer)) {
            throw new \InvalidArgumentException('non-nullable payer cannot be null');
        }
        $this->container['payer'] = $payer;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address The recipient of the emailed receipt.
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        if (is_null($email_address)) {
            throw new \InvalidArgumentException('non-nullable email_address cannot be null');
        }
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets token_id
     *
     * @return string|null
     */
    public function getTokenId()
    {
        return $this->container['token_id'];
    }

    /**
     * Sets token_id
     *
     * @param string|null $token_id The token Id that represents the payment method to be used on the schedule.
     *
     * @return self
     */
    public function setTokenId($token_id)
    {
        if (is_null($token_id)) {
            throw new \InvalidArgumentException('non-nullable token_id cannot be null');
        }
        $this->container['token_id'] = $token_id;

        return $this;
    }

    /**
     * Gets number_of_total_payments
     *
     * @return int|null
     */
    public function getNumberOfTotalPayments()
    {
        return $this->container['number_of_total_payments'];
    }

    /**
     * Sets number_of_total_payments
     *
     * @param int|null $number_of_total_payments The number of payments to process on the schedule if the payment schedule has a pre-determined list of payments.
     *
     * @return self
     */
    public function setNumberOfTotalPayments($number_of_total_payments)
    {
        if (is_null($number_of_total_payments)) {
            throw new \InvalidArgumentException('non-nullable number_of_total_payments cannot be null');
        }
        $this->container['number_of_total_payments'] = $number_of_total_payments;

        return $this;
    }

    /**
     * Gets number_of_executed_payments
     *
     * @return int|null
     */
    public function getNumberOfExecutedPayments()
    {
        return $this->container['number_of_executed_payments'];
    }

    /**
     * Sets number_of_executed_payments
     *
     * @param int|null $number_of_executed_payments The number of executed payments.
     *
     * @return self
     */
    public function setNumberOfExecutedPayments($number_of_executed_payments)
    {
        if (is_null($number_of_executed_payments)) {
            throw new \InvalidArgumentException('non-nullable number_of_executed_payments cannot be null');
        }
        $this->container['number_of_executed_payments'] = $number_of_executed_payments;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The amount of each recurring payment.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets payer_fee
     *
     * @return float|null
     */
    public function getPayerFee()
    {
        return $this->container['payer_fee'];
    }

    /**
     * Sets payer_fee
     *
     * @param float|null $payer_fee Used if the calling application has pre-calculated a payer fee. In that case, the fee will not be re-calculated. This amount, if set, will not be added to the amount field prior to processing.
     *
     * @return self
     */
    public function setPayerFee($payer_fee)
    {
        if (is_null($payer_fee)) {
            throw new \InvalidArgumentException('non-nullable payer_fee cannot be null');
        }
        $this->container['payer_fee'] = $payer_fee;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date The date of the initial payment.
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date The end date of the schedule if the schedule was created with a pre-determined end date.
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets next_payment_date
     *
     * @return \DateTime|null
     */
    public function getNextPaymentDate()
    {
        return $this->container['next_payment_date'];
    }

    /**
     * Sets next_payment_date
     *
     * @param \DateTime|null $next_payment_date The date of the next payment.
     *
     * @return self
     */
    public function setNextPaymentDate($next_payment_date)
    {
        if (is_null($next_payment_date)) {
            throw new \InvalidArgumentException('non-nullable next_payment_date cannot be null');
        }
        $this->container['next_payment_date'] = $next_payment_date;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return string|null
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param string|null $interval The interval by which the payments should be run.
     *
     * @return self
     */
    public function setInterval($interval)
    {
        if (is_null($interval)) {
            throw new \InvalidArgumentException('non-nullable interval cannot be null');
        }
        $allowedValues = $this->getIntervalAllowableValues();
        if (!in_array($interval, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interval', must be one of '%s'",
                    $interval,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets interval_count
     *
     * @return int|null
     */
    public function getIntervalCount()
    {
        return $this->container['interval_count'];
    }

    /**
     * Sets interval_count
     *
     * @param int|null $interval_count The number of days, weeks, etc to wait between payments.
     *
     * @return self
     */
    public function setIntervalCount($interval_count)
    {
        if (is_null($interval_count)) {
            throw new \InvalidArgumentException('non-nullable interval_count cannot be null');
        }
        $this->container['interval_count'] = $interval_count;

        return $this;
    }

    /**
     * Gets attribute_values
     *
     * @return array<string,string>|null
     */
    public function getAttributeValues()
    {
        return $this->container['attribute_values'];
    }

    /**
     * Sets attribute_values
     *
     * @param array<string,string>|null $attribute_values Dictionary of custom attribute values. The key in the dictionary is the identifier of the custom attribute.
     *
     * @return self
     */
    public function setAttributeValues($attribute_values)
    {
        if (is_null($attribute_values)) {
            throw new \InvalidArgumentException('non-nullable attribute_values cannot be null');
        }
        $this->container['attribute_values'] = $attribute_values;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Comments that are shown on the receipt.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


