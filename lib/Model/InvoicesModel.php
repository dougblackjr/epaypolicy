<?php
/**
 * InvoicesModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tns\\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * epay3 API 1.0
 *
 * This API supports the processing of credit card and eCheck/ACH payments.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@epay3.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tns\\EpayPolicy\Model;

use \ArrayAccess;
use \Tns\\EpayPolicy\ObjectSerializer;

/**
 * InvoicesModel Class Doc Comment
 *
 * @category Class
 * @package  Tns\\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoicesModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoicesModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payer_name' => 'string',
        'email_addresses' => 'string[]',
        'auto_pay_subscription_id' => 'int',
        'enable_autopay' => 'bool',
        'enable_autopay_payless_enrollment' => 'bool',
        'auto_pay_email_offset' => 'int',
        'auto_pay_cancelable' => 'bool',
        'invoice_attribute_metadata' => '\Tns\\EpayPolicy\Model\AttributeMetadataModel[]',
        'invoices' => '\Tns\\EpayPolicy\Model\InvoiceModel[]',
        'status' => 'string',
        'exception' => '\Tns\\EpayPolicy\Model\SerializableException',
        'any_financing_eligible' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payer_name' => null,
        'email_addresses' => null,
        'auto_pay_subscription_id' => 'int64',
        'enable_autopay' => null,
        'enable_autopay_payless_enrollment' => null,
        'auto_pay_email_offset' => 'int32',
        'auto_pay_cancelable' => null,
        'invoice_attribute_metadata' => null,
        'invoices' => null,
        'status' => null,
        'exception' => null,
        'any_financing_eligible' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payer_name' => false,
        'email_addresses' => false,
        'auto_pay_subscription_id' => false,
        'enable_autopay' => false,
        'enable_autopay_payless_enrollment' => false,
        'auto_pay_email_offset' => false,
        'auto_pay_cancelable' => false,
        'invoice_attribute_metadata' => false,
        'invoices' => false,
        'status' => false,
        'exception' => false,
        'any_financing_eligible' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payer_name' => 'payerName',
        'email_addresses' => 'emailAddresses',
        'auto_pay_subscription_id' => 'autoPaySubscriptionId',
        'enable_autopay' => 'enableAutopay',
        'enable_autopay_payless_enrollment' => 'enableAutopayPaylessEnrollment',
        'auto_pay_email_offset' => 'autoPayEmailOffset',
        'auto_pay_cancelable' => 'autoPayCancelable',
        'invoice_attribute_metadata' => 'invoiceAttributeMetadata',
        'invoices' => 'invoices',
        'status' => 'status',
        'exception' => 'exception',
        'any_financing_eligible' => 'anyFinancingEligible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payer_name' => 'setPayerName',
        'email_addresses' => 'setEmailAddresses',
        'auto_pay_subscription_id' => 'setAutoPaySubscriptionId',
        'enable_autopay' => 'setEnableAutopay',
        'enable_autopay_payless_enrollment' => 'setEnableAutopayPaylessEnrollment',
        'auto_pay_email_offset' => 'setAutoPayEmailOffset',
        'auto_pay_cancelable' => 'setAutoPayCancelable',
        'invoice_attribute_metadata' => 'setInvoiceAttributeMetadata',
        'invoices' => 'setInvoices',
        'status' => 'setStatus',
        'exception' => 'setException',
        'any_financing_eligible' => 'setAnyFinancingEligible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payer_name' => 'getPayerName',
        'email_addresses' => 'getEmailAddresses',
        'auto_pay_subscription_id' => 'getAutoPaySubscriptionId',
        'enable_autopay' => 'getEnableAutopay',
        'enable_autopay_payless_enrollment' => 'getEnableAutopayPaylessEnrollment',
        'auto_pay_email_offset' => 'getAutoPayEmailOffset',
        'auto_pay_cancelable' => 'getAutoPayCancelable',
        'invoice_attribute_metadata' => 'getInvoiceAttributeMetadata',
        'invoices' => 'getInvoices',
        'status' => 'getStatus',
        'exception' => 'getException',
        'any_financing_eligible' => 'getAnyFinancingEligible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_SUCCESS = 'Success';
    public const STATUS_ACCOUNT_NOT_FOUND = 'AccountNotFound';
    public const STATUS_ERROR = 'Error';
    public const STATUS_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_SUCCESS,
            self::STATUS_ACCOUNT_NOT_FOUND,
            self::STATUS_ERROR,
            self::STATUS_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('payer_name', $data ?? [], null);
        $this->setIfExists('email_addresses', $data ?? [], null);
        $this->setIfExists('auto_pay_subscription_id', $data ?? [], null);
        $this->setIfExists('enable_autopay', $data ?? [], null);
        $this->setIfExists('enable_autopay_payless_enrollment', $data ?? [], null);
        $this->setIfExists('auto_pay_email_offset', $data ?? [], null);
        $this->setIfExists('auto_pay_cancelable', $data ?? [], null);
        $this->setIfExists('invoice_attribute_metadata', $data ?? [], null);
        $this->setIfExists('invoices', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('exception', $data ?? [], null);
        $this->setIfExists('any_financing_eligible', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payer_name
     *
     * @return string|null
     */
    public function getPayerName()
    {
        return $this->container['payer_name'];
    }

    /**
     * Sets payer_name
     *
     * @param string|null $payer_name payer_name
     *
     * @return self
     */
    public function setPayerName($payer_name)
    {
        if (is_null($payer_name)) {
            throw new \InvalidArgumentException('non-nullable payer_name cannot be null');
        }
        $this->container['payer_name'] = $payer_name;

        return $this;
    }

    /**
     * Gets email_addresses
     *
     * @return string[]|null
     */
    public function getEmailAddresses()
    {
        return $this->container['email_addresses'];
    }

    /**
     * Sets email_addresses
     *
     * @param string[]|null $email_addresses email_addresses
     *
     * @return self
     */
    public function setEmailAddresses($email_addresses)
    {
        if (is_null($email_addresses)) {
            throw new \InvalidArgumentException('non-nullable email_addresses cannot be null');
        }
        $this->container['email_addresses'] = $email_addresses;

        return $this;
    }

    /**
     * Gets auto_pay_subscription_id
     *
     * @return int|null
     */
    public function getAutoPaySubscriptionId()
    {
        return $this->container['auto_pay_subscription_id'];
    }

    /**
     * Sets auto_pay_subscription_id
     *
     * @param int|null $auto_pay_subscription_id auto_pay_subscription_id
     *
     * @return self
     */
    public function setAutoPaySubscriptionId($auto_pay_subscription_id)
    {
        if (is_null($auto_pay_subscription_id)) {
            throw new \InvalidArgumentException('non-nullable auto_pay_subscription_id cannot be null');
        }
        $this->container['auto_pay_subscription_id'] = $auto_pay_subscription_id;

        return $this;
    }

    /**
     * Gets enable_autopay
     *
     * @return bool|null
     */
    public function getEnableAutopay()
    {
        return $this->container['enable_autopay'];
    }

    /**
     * Sets enable_autopay
     *
     * @param bool|null $enable_autopay enable_autopay
     *
     * @return self
     */
    public function setEnableAutopay($enable_autopay)
    {
        if (is_null($enable_autopay)) {
            throw new \InvalidArgumentException('non-nullable enable_autopay cannot be null');
        }
        $this->container['enable_autopay'] = $enable_autopay;

        return $this;
    }

    /**
     * Gets enable_autopay_payless_enrollment
     *
     * @return bool|null
     */
    public function getEnableAutopayPaylessEnrollment()
    {
        return $this->container['enable_autopay_payless_enrollment'];
    }

    /**
     * Sets enable_autopay_payless_enrollment
     *
     * @param bool|null $enable_autopay_payless_enrollment enable_autopay_payless_enrollment
     *
     * @return self
     */
    public function setEnableAutopayPaylessEnrollment($enable_autopay_payless_enrollment)
    {
        if (is_null($enable_autopay_payless_enrollment)) {
            throw new \InvalidArgumentException('non-nullable enable_autopay_payless_enrollment cannot be null');
        }
        $this->container['enable_autopay_payless_enrollment'] = $enable_autopay_payless_enrollment;

        return $this;
    }

    /**
     * Gets auto_pay_email_offset
     *
     * @return int|null
     */
    public function getAutoPayEmailOffset()
    {
        return $this->container['auto_pay_email_offset'];
    }

    /**
     * Sets auto_pay_email_offset
     *
     * @param int|null $auto_pay_email_offset auto_pay_email_offset
     *
     * @return self
     */
    public function setAutoPayEmailOffset($auto_pay_email_offset)
    {
        if (is_null($auto_pay_email_offset)) {
            throw new \InvalidArgumentException('non-nullable auto_pay_email_offset cannot be null');
        }
        $this->container['auto_pay_email_offset'] = $auto_pay_email_offset;

        return $this;
    }

    /**
     * Gets auto_pay_cancelable
     *
     * @return bool|null
     */
    public function getAutoPayCancelable()
    {
        return $this->container['auto_pay_cancelable'];
    }

    /**
     * Sets auto_pay_cancelable
     *
     * @param bool|null $auto_pay_cancelable auto_pay_cancelable
     *
     * @return self
     */
    public function setAutoPayCancelable($auto_pay_cancelable)
    {
        if (is_null($auto_pay_cancelable)) {
            throw new \InvalidArgumentException('non-nullable auto_pay_cancelable cannot be null');
        }
        $this->container['auto_pay_cancelable'] = $auto_pay_cancelable;

        return $this;
    }

    /**
     * Gets invoice_attribute_metadata
     *
     * @return \Tns\\EpayPolicy\Model\AttributeMetadataModel[]|null
     */
    public function getInvoiceAttributeMetadata()
    {
        return $this->container['invoice_attribute_metadata'];
    }

    /**
     * Sets invoice_attribute_metadata
     *
     * @param \Tns\\EpayPolicy\Model\AttributeMetadataModel[]|null $invoice_attribute_metadata Metadata on any custom attributes that will be displayed at the invoice level.
     *
     * @return self
     */
    public function setInvoiceAttributeMetadata($invoice_attribute_metadata)
    {
        if (is_null($invoice_attribute_metadata)) {
            throw new \InvalidArgumentException('non-nullable invoice_attribute_metadata cannot be null');
        }
        $this->container['invoice_attribute_metadata'] = $invoice_attribute_metadata;

        return $this;
    }

    /**
     * Gets invoices
     *
     * @return \Tns\\EpayPolicy\Model\InvoiceModel[]|null
     */
    public function getInvoices()
    {
        return $this->container['invoices'];
    }

    /**
     * Sets invoices
     *
     * @param \Tns\\EpayPolicy\Model\InvoiceModel[]|null $invoices The collection of invoices.
     *
     * @return self
     */
    public function setInvoices($invoices)
    {
        if (is_null($invoices)) {
            throw new \InvalidArgumentException('non-nullable invoices cannot be null');
        }
        $this->container['invoices'] = $invoices;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Whether the referenced account was found.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets exception
     *
     * @return \Tns\\EpayPolicy\Model\SerializableException|null
     */
    public function getException()
    {
        return $this->container['exception'];
    }

    /**
     * Sets exception
     *
     * @param \Tns\\EpayPolicy\Model\SerializableException|null $exception exception
     *
     * @return self
     */
    public function setException($exception)
    {
        if (is_null($exception)) {
            throw new \InvalidArgumentException('non-nullable exception cannot be null');
        }
        $this->container['exception'] = $exception;

        return $this;
    }

    /**
     * Gets any_financing_eligible
     *
     * @return bool|null
     */
    public function getAnyFinancingEligible()
    {
        return $this->container['any_financing_eligible'];
    }

    /**
     * Sets any_financing_eligible
     *
     * @param bool|null $any_financing_eligible any_financing_eligible
     *
     * @return self
     */
    public function setAnyFinancingEligible($any_financing_eligible)
    {
        if (is_null($any_financing_eligible)) {
            throw new \InvalidArgumentException('non-nullable any_financing_eligible cannot be null');
        }
        $this->container['any_financing_eligible'] = $any_financing_eligible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


