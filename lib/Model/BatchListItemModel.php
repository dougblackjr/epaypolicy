<?php
/**
 * BatchListItemModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tns\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * epay3 API 1.0
 *
 * This API supports the processing of credit card and eCheck/ACH payments.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@epay3.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tns\EpayPolicy\Model;

use \ArrayAccess;
use \Tns\EpayPolicy\ObjectSerializer;

/**
 * BatchListItemModel Class Doc Comment
 *
 * @category Class
 * @package  Tns\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BatchListItemModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BatchListItemModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'created' => '\DateTime',
        'number_of_credits' => 'int',
        'total_of_credits' => 'float',
        'number_of_debits' => 'int',
        'total_of_debits' => 'float',
        'currency' => 'string',
        'divisions' => '\Tns\EpayPolicy\Model\DivisionViewModel[]',
        'processor' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'created' => 'date-time',
        'number_of_credits' => 'int32',
        'total_of_credits' => 'double',
        'number_of_debits' => 'int32',
        'total_of_debits' => 'double',
        'currency' => null,
        'divisions' => null,
        'processor' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created' => false,
        'number_of_credits' => false,
        'total_of_credits' => false,
        'number_of_debits' => false,
        'total_of_debits' => false,
        'currency' => false,
        'divisions' => false,
        'processor' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created' => 'created',
        'number_of_credits' => 'numberOfCredits',
        'total_of_credits' => 'totalOfCredits',
        'number_of_debits' => 'numberOfDebits',
        'total_of_debits' => 'totalOfDebits',
        'currency' => 'currency',
        'divisions' => 'divisions',
        'processor' => 'processor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'number_of_credits' => 'setNumberOfCredits',
        'total_of_credits' => 'setTotalOfCredits',
        'number_of_debits' => 'setNumberOfDebits',
        'total_of_debits' => 'setTotalOfDebits',
        'currency' => 'setCurrency',
        'divisions' => 'setDivisions',
        'processor' => 'setProcessor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'number_of_credits' => 'getNumberOfCredits',
        'total_of_credits' => 'getTotalOfCredits',
        'number_of_debits' => 'getNumberOfDebits',
        'total_of_debits' => 'getTotalOfDebits',
        'currency' => 'getCurrency',
        'divisions' => 'getDivisions',
        'processor' => 'getProcessor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CURRENCY_USD = 'USD';
    public const CURRENCY_CAD = 'CAD';
    public const CURRENCY_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_USD,
            self::CURRENCY_CAD,
            self::CURRENCY_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('number_of_credits', $data ?? [], null);
        $this->setIfExists('total_of_credits', $data ?? [], null);
        $this->setIfExists('number_of_debits', $data ?? [], null);
        $this->setIfExists('total_of_debits', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('divisions', $data ?? [], null);
        $this->setIfExists('processor', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets number_of_credits
     *
     * @return int|null
     */
    public function getNumberOfCredits()
    {
        return $this->container['number_of_credits'];
    }

    /**
     * Sets number_of_credits
     *
     * @param int|null $number_of_credits number_of_credits
     *
     * @return self
     */
    public function setNumberOfCredits($number_of_credits)
    {
        if (is_null($number_of_credits)) {
            throw new \InvalidArgumentException('non-nullable number_of_credits cannot be null');
        }
        $this->container['number_of_credits'] = $number_of_credits;

        return $this;
    }

    /**
     * Gets total_of_credits
     *
     * @return float|null
     */
    public function getTotalOfCredits()
    {
        return $this->container['total_of_credits'];
    }

    /**
     * Sets total_of_credits
     *
     * @param float|null $total_of_credits total_of_credits
     *
     * @return self
     */
    public function setTotalOfCredits($total_of_credits)
    {
        if (is_null($total_of_credits)) {
            throw new \InvalidArgumentException('non-nullable total_of_credits cannot be null');
        }
        $this->container['total_of_credits'] = $total_of_credits;

        return $this;
    }

    /**
     * Gets number_of_debits
     *
     * @return int|null
     */
    public function getNumberOfDebits()
    {
        return $this->container['number_of_debits'];
    }

    /**
     * Sets number_of_debits
     *
     * @param int|null $number_of_debits number_of_debits
     *
     * @return self
     */
    public function setNumberOfDebits($number_of_debits)
    {
        if (is_null($number_of_debits)) {
            throw new \InvalidArgumentException('non-nullable number_of_debits cannot be null');
        }
        $this->container['number_of_debits'] = $number_of_debits;

        return $this;
    }

    /**
     * Gets total_of_debits
     *
     * @return float|null
     */
    public function getTotalOfDebits()
    {
        return $this->container['total_of_debits'];
    }

    /**
     * Sets total_of_debits
     *
     * @param float|null $total_of_debits total_of_debits
     *
     * @return self
     */
    public function setTotalOfDebits($total_of_debits)
    {
        if (is_null($total_of_debits)) {
            throw new \InvalidArgumentException('non-nullable total_of_debits cannot be null');
        }
        $this->container['total_of_debits'] = $total_of_debits;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets divisions
     *
     * @return \Tns\EpayPolicy\Model\DivisionViewModel[]|null
     */
    public function getDivisions()
    {
        return $this->container['divisions'];
    }

    /**
     * Sets divisions
     *
     * @param \Tns\EpayPolicy\Model\DivisionViewModel[]|null $divisions divisions
     *
     * @return self
     */
    public function setDivisions($divisions)
    {
        if (is_null($divisions)) {
            throw new \InvalidArgumentException('non-nullable divisions cannot be null');
        }
        $this->container['divisions'] = $divisions;

        return $this;
    }

    /**
     * Gets processor
     *
     * @return string|null
     */
    public function getProcessor()
    {
        return $this->container['processor'];
    }

    /**
     * Sets processor
     *
     * @param string|null $processor processor
     *
     * @return self
     */
    public function setProcessor($processor)
    {
        if (is_null($processor)) {
            throw new \InvalidArgumentException('non-nullable processor cannot be null');
        }
        $this->container['processor'] = $processor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


