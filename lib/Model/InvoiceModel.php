<?php
/**
 * InvoiceModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tns\\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * epay3 API 1.0
 *
 * This API supports the processing of credit card and eCheck/ACH payments.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@epay3.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tns\\EpayPolicy\Model;

use \ArrayAccess;
use \Tns\\EpayPolicy\ObjectSerializer;

/**
 * InvoiceModel Class Doc Comment
 *
 * @category Class
 * @description Describes the details of an individual invoice.
 * @package  Tns\\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoiceModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'due_date' => '\DateTime',
        'amount' => 'float',
        'maximum_amount' => 'float',
        'minimum_amount' => 'float',
        'allow_partial_payment' => 'bool',
        'comment' => 'string',
        'division_id' => 'string',
        'down_payment_amount' => 'float',
        'number_of_installments' => 'int',
        'installment_amount' => 'float',
        'attribute_values' => '\Tns\\EpayPolicy\Model\AttributeValueModel[]',
        'search_attribute_values' => 'array<string,string>',
        'invoice_items' => '\Tns\\EpayPolicy\Model\InvoiceItemModel[]',
        'policy_effective_date' => '\DateTime',
        'policy_number' => 'string',
        'is_financing_eligible' => 'bool',
        'finance_status_description' => 'string',
        'finance_eligibility_hash' => 'string',
        'data_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'due_date' => 'date-time',
        'amount' => 'double',
        'maximum_amount' => 'double',
        'minimum_amount' => 'double',
        'allow_partial_payment' => null,
        'comment' => null,
        'division_id' => null,
        'down_payment_amount' => 'double',
        'number_of_installments' => 'int32',
        'installment_amount' => 'double',
        'attribute_values' => null,
        'search_attribute_values' => null,
        'invoice_items' => null,
        'policy_effective_date' => 'date-time',
        'policy_number' => null,
        'is_financing_eligible' => null,
        'finance_status_description' => null,
        'finance_eligibility_hash' => null,
        'data_token' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'due_date' => false,
        'amount' => false,
        'maximum_amount' => false,
        'minimum_amount' => false,
        'allow_partial_payment' => false,
        'comment' => false,
        'division_id' => false,
        'down_payment_amount' => false,
        'number_of_installments' => false,
        'installment_amount' => false,
        'attribute_values' => false,
        'search_attribute_values' => false,
        'invoice_items' => false,
        'policy_effective_date' => false,
        'policy_number' => false,
        'is_financing_eligible' => false,
        'finance_status_description' => false,
        'finance_eligibility_hash' => false,
        'data_token' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'due_date' => 'dueDate',
        'amount' => 'amount',
        'maximum_amount' => 'maximumAmount',
        'minimum_amount' => 'minimumAmount',
        'allow_partial_payment' => 'allowPartialPayment',
        'comment' => 'comment',
        'division_id' => 'divisionId',
        'down_payment_amount' => 'downPaymentAmount',
        'number_of_installments' => 'numberOfInstallments',
        'installment_amount' => 'installmentAmount',
        'attribute_values' => 'attributeValues',
        'search_attribute_values' => 'searchAttributeValues',
        'invoice_items' => 'invoiceItems',
        'policy_effective_date' => 'policyEffectiveDate',
        'policy_number' => 'policyNumber',
        'is_financing_eligible' => 'isFinancingEligible',
        'finance_status_description' => 'financeStatusDescription',
        'finance_eligibility_hash' => 'financeEligibilityHash',
        'data_token' => 'dataToken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'due_date' => 'setDueDate',
        'amount' => 'setAmount',
        'maximum_amount' => 'setMaximumAmount',
        'minimum_amount' => 'setMinimumAmount',
        'allow_partial_payment' => 'setAllowPartialPayment',
        'comment' => 'setComment',
        'division_id' => 'setDivisionId',
        'down_payment_amount' => 'setDownPaymentAmount',
        'number_of_installments' => 'setNumberOfInstallments',
        'installment_amount' => 'setInstallmentAmount',
        'attribute_values' => 'setAttributeValues',
        'search_attribute_values' => 'setSearchAttributeValues',
        'invoice_items' => 'setInvoiceItems',
        'policy_effective_date' => 'setPolicyEffectiveDate',
        'policy_number' => 'setPolicyNumber',
        'is_financing_eligible' => 'setIsFinancingEligible',
        'finance_status_description' => 'setFinanceStatusDescription',
        'finance_eligibility_hash' => 'setFinanceEligibilityHash',
        'data_token' => 'setDataToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'due_date' => 'getDueDate',
        'amount' => 'getAmount',
        'maximum_amount' => 'getMaximumAmount',
        'minimum_amount' => 'getMinimumAmount',
        'allow_partial_payment' => 'getAllowPartialPayment',
        'comment' => 'getComment',
        'division_id' => 'getDivisionId',
        'down_payment_amount' => 'getDownPaymentAmount',
        'number_of_installments' => 'getNumberOfInstallments',
        'installment_amount' => 'getInstallmentAmount',
        'attribute_values' => 'getAttributeValues',
        'search_attribute_values' => 'getSearchAttributeValues',
        'invoice_items' => 'getInvoiceItems',
        'policy_effective_date' => 'getPolicyEffectiveDate',
        'policy_number' => 'getPolicyNumber',
        'is_financing_eligible' => 'getIsFinancingEligible',
        'finance_status_description' => 'getFinanceStatusDescription',
        'finance_eligibility_hash' => 'getFinanceEligibilityHash',
        'data_token' => 'getDataToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('maximum_amount', $data ?? [], null);
        $this->setIfExists('minimum_amount', $data ?? [], null);
        $this->setIfExists('allow_partial_payment', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('division_id', $data ?? [], null);
        $this->setIfExists('down_payment_amount', $data ?? [], null);
        $this->setIfExists('number_of_installments', $data ?? [], null);
        $this->setIfExists('installment_amount', $data ?? [], null);
        $this->setIfExists('attribute_values', $data ?? [], null);
        $this->setIfExists('search_attribute_values', $data ?? [], null);
        $this->setIfExists('invoice_items', $data ?? [], null);
        $this->setIfExists('policy_effective_date', $data ?? [], null);
        $this->setIfExists('policy_number', $data ?? [], null);
        $this->setIfExists('is_financing_eligible', $data ?? [], null);
        $this->setIfExists('finance_status_description', $data ?? [], null);
        $this->setIfExists('finance_eligibility_hash', $data ?? [], null);
        $this->setIfExists('data_token', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['due_date'] === null) {
            $invalidProperties[] = "'due_date' can't be null";
        }
        if ($this->container['attribute_values'] === null) {
            $invalidProperties[] = "'attribute_values' can't be null";
        }
        if ($this->container['invoice_items'] === null) {
            $invalidProperties[] = "'invoice_items' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier of the invoice.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The customer name on the invoice.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date The due date of the invoice.
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The total amount due.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets maximum_amount
     *
     * @return float|null
     */
    public function getMaximumAmount()
    {
        return $this->container['maximum_amount'];
    }

    /**
     * Sets maximum_amount
     *
     * @param float|null $maximum_amount The maximum amount the payer is allowed to pay.
     *
     * @return self
     */
    public function setMaximumAmount($maximum_amount)
    {
        if (is_null($maximum_amount)) {
            throw new \InvalidArgumentException('non-nullable maximum_amount cannot be null');
        }
        $this->container['maximum_amount'] = $maximum_amount;

        return $this;
    }

    /**
     * Gets minimum_amount
     *
     * @return float|null
     */
    public function getMinimumAmount()
    {
        return $this->container['minimum_amount'];
    }

    /**
     * Sets minimum_amount
     *
     * @param float|null $minimum_amount The minimum amount the payer is allowed to pay.
     *
     * @return self
     */
    public function setMinimumAmount($minimum_amount)
    {
        if (is_null($minimum_amount)) {
            throw new \InvalidArgumentException('non-nullable minimum_amount cannot be null');
        }
        $this->container['minimum_amount'] = $minimum_amount;

        return $this;
    }

    /**
     * Gets allow_partial_payment
     *
     * @return bool|null
     */
    public function getAllowPartialPayment()
    {
        return $this->container['allow_partial_payment'];
    }

    /**
     * Sets allow_partial_payment
     *
     * @param bool|null $allow_partial_payment Indicates whether a partial payment is allowed on the invoice.
     *
     * @return self
     */
    public function setAllowPartialPayment($allow_partial_payment)
    {
        if (is_null($allow_partial_payment)) {
            throw new \InvalidArgumentException('non-nullable allow_partial_payment cannot be null');
        }
        $this->container['allow_partial_payment'] = $allow_partial_payment;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment The Comment for the Invoice submitted by the payer.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets division_id
     *
     * @return string|null
     */
    public function getDivisionId()
    {
        return $this->container['division_id'];
    }

    /**
     * Sets division_id
     *
     * @param string|null $division_id Optional division id to specify recieving account.
     *
     * @return self
     */
    public function setDivisionId($division_id)
    {
        if (is_null($division_id)) {
            throw new \InvalidArgumentException('non-nullable division_id cannot be null');
        }
        $this->container['division_id'] = $division_id;

        return $this;
    }

    /**
     * Gets down_payment_amount
     *
     * @return float|null
     */
    public function getDownPaymentAmount()
    {
        return $this->container['down_payment_amount'];
    }

    /**
     * Sets down_payment_amount
     *
     * @param float|null $down_payment_amount If finance eligible, the required down payment
     *
     * @return self
     */
    public function setDownPaymentAmount($down_payment_amount)
    {
        if (is_null($down_payment_amount)) {
            throw new \InvalidArgumentException('non-nullable down_payment_amount cannot be null');
        }
        $this->container['down_payment_amount'] = $down_payment_amount;

        return $this;
    }

    /**
     * Gets number_of_installments
     *
     * @return int|null
     */
    public function getNumberOfInstallments()
    {
        return $this->container['number_of_installments'];
    }

    /**
     * Sets number_of_installments
     *
     * @param int|null $number_of_installments If financed, the number of installment payments.
     *
     * @return self
     */
    public function setNumberOfInstallments($number_of_installments)
    {
        if (is_null($number_of_installments)) {
            throw new \InvalidArgumentException('non-nullable number_of_installments cannot be null');
        }
        $this->container['number_of_installments'] = $number_of_installments;

        return $this;
    }

    /**
     * Gets installment_amount
     *
     * @return float|null
     */
    public function getInstallmentAmount()
    {
        return $this->container['installment_amount'];
    }

    /**
     * Sets installment_amount
     *
     * @param float|null $installment_amount if financed, the amount of each installment payment.
     *
     * @return self
     */
    public function setInstallmentAmount($installment_amount)
    {
        if (is_null($installment_amount)) {
            throw new \InvalidArgumentException('non-nullable installment_amount cannot be null');
        }
        $this->container['installment_amount'] = $installment_amount;

        return $this;
    }

    /**
     * Gets attribute_values
     *
     * @return \Tns\\EpayPolicy\Model\AttributeValueModel[]
     */
    public function getAttributeValues()
    {
        return $this->container['attribute_values'];
    }

    /**
     * Sets attribute_values
     *
     * @param \Tns\\EpayPolicy\Model\AttributeValueModel[] $attribute_values The actual values of the custom attributes at the invoice level.
     *
     * @return self
     */
    public function setAttributeValues($attribute_values)
    {
        if (is_null($attribute_values)) {
            throw new \InvalidArgumentException('non-nullable attribute_values cannot be null');
        }
        $this->container['attribute_values'] = $attribute_values;

        return $this;
    }

    /**
     * Gets search_attribute_values
     *
     * @return array<string,string>|null
     */
    public function getSearchAttributeValues()
    {
        return $this->container['search_attribute_values'];
    }

    /**
     * Sets search_attribute_values
     *
     * @param array<string,string>|null $search_attribute_values Attributes used to find this invoice in management system
     *
     * @return self
     */
    public function setSearchAttributeValues($search_attribute_values)
    {
        if (is_null($search_attribute_values)) {
            throw new \InvalidArgumentException('non-nullable search_attribute_values cannot be null');
        }
        $this->container['search_attribute_values'] = $search_attribute_values;

        return $this;
    }

    /**
     * Gets invoice_items
     *
     * @return \Tns\\EpayPolicy\Model\InvoiceItemModel[]
     */
    public function getInvoiceItems()
    {
        return $this->container['invoice_items'];
    }

    /**
     * Sets invoice_items
     *
     * @param \Tns\\EpayPolicy\Model\InvoiceItemModel[] $invoice_items A collection of invoice items.
     *
     * @return self
     */
    public function setInvoiceItems($invoice_items)
    {
        if (is_null($invoice_items)) {
            throw new \InvalidArgumentException('non-nullable invoice_items cannot be null');
        }
        $this->container['invoice_items'] = $invoice_items;

        return $this;
    }

    /**
     * Gets policy_effective_date
     *
     * @return \DateTime|null
     */
    public function getPolicyEffectiveDate()
    {
        return $this->container['policy_effective_date'];
    }

    /**
     * Sets policy_effective_date
     *
     * @param \DateTime|null $policy_effective_date Effective date of the policy.
     *
     * @return self
     */
    public function setPolicyEffectiveDate($policy_effective_date)
    {
        if (is_null($policy_effective_date)) {
            throw new \InvalidArgumentException('non-nullable policy_effective_date cannot be null');
        }
        $this->container['policy_effective_date'] = $policy_effective_date;

        return $this;
    }

    /**
     * Gets policy_number
     *
     * @return string|null
     */
    public function getPolicyNumber()
    {
        return $this->container['policy_number'];
    }

    /**
     * Sets policy_number
     *
     * @param string|null $policy_number The policy number.
     *
     * @return self
     */
    public function setPolicyNumber($policy_number)
    {
        if (is_null($policy_number)) {
            throw new \InvalidArgumentException('non-nullable policy_number cannot be null');
        }
        $this->container['policy_number'] = $policy_number;

        return $this;
    }

    /**
     * Gets is_financing_eligible
     *
     * @return bool|null
     */
    public function getIsFinancingEligible()
    {
        return $this->container['is_financing_eligible'];
    }

    /**
     * Sets is_financing_eligible
     *
     * @param bool|null $is_financing_eligible is_financing_eligible
     *
     * @return self
     */
    public function setIsFinancingEligible($is_financing_eligible)
    {
        if (is_null($is_financing_eligible)) {
            throw new \InvalidArgumentException('non-nullable is_financing_eligible cannot be null');
        }
        $this->container['is_financing_eligible'] = $is_financing_eligible;

        return $this;
    }

    /**
     * Gets finance_status_description
     *
     * @return string|null
     */
    public function getFinanceStatusDescription()
    {
        return $this->container['finance_status_description'];
    }

    /**
     * Sets finance_status_description
     *
     * @param string|null $finance_status_description finance_status_description
     *
     * @return self
     */
    public function setFinanceStatusDescription($finance_status_description)
    {
        if (is_null($finance_status_description)) {
            throw new \InvalidArgumentException('non-nullable finance_status_description cannot be null');
        }
        $this->container['finance_status_description'] = $finance_status_description;

        return $this;
    }

    /**
     * Gets finance_eligibility_hash
     *
     * @return string|null
     */
    public function getFinanceEligibilityHash()
    {
        return $this->container['finance_eligibility_hash'];
    }

    /**
     * Sets finance_eligibility_hash
     *
     * @param string|null $finance_eligibility_hash finance_eligibility_hash
     *
     * @return self
     */
    public function setFinanceEligibilityHash($finance_eligibility_hash)
    {
        if (is_null($finance_eligibility_hash)) {
            throw new \InvalidArgumentException('non-nullable finance_eligibility_hash cannot be null');
        }
        $this->container['finance_eligibility_hash'] = $finance_eligibility_hash;

        return $this;
    }

    /**
     * Gets data_token
     *
     * @return string|null
     */
    public function getDataToken()
    {
        return $this->container['data_token'];
    }

    /**
     * Sets data_token
     *
     * @param string|null $data_token data_token
     *
     * @return self
     */
    public function setDataToken($data_token)
    {
        if (is_null($data_token)) {
            throw new \InvalidArgumentException('non-nullable data_token cannot be null');
        }
        $this->container['data_token'] = $data_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


