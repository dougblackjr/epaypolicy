<?php
/**
 * UnderwritingContactModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tns\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * epay3 API 1.0
 *
 * This API supports the processing of credit card and eCheck/ACH payments.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@epay3.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tns\EpayPolicy\Model;

use \ArrayAccess;
use \Tns\EpayPolicy\ObjectSerializer;

/**
 * UnderwritingContactModel Class Doc Comment
 *
 * @category Class
 * @package  Tns\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UnderwritingContactModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UnderwritingContactModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'company_code' => 'string',
        'company_naic' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'state' => 'string',
        'display_state' => 'string',
        'suite' => 'string',
        'street' => 'string',
        'city' => 'string',
        'postal_code' => 'string',
        'country' => 'string',
        'countries' => '\Tns\EpayPolicy\Model\LookUpModelByte[]',
        'address_without_suite' => 'string',
        'address_with_suite' => 'string',
        'address_with_suite_and_country' => 'string',
        'street_address' => 'string',
        'country_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'company_code' => null,
        'company_naic' => null,
        'email' => null,
        'phone' => null,
        'state' => null,
        'display_state' => null,
        'suite' => null,
        'street' => null,
        'city' => null,
        'postal_code' => null,
        'country' => 'byte',
        'countries' => null,
        'address_without_suite' => null,
        'address_with_suite' => null,
        'address_with_suite_and_country' => null,
        'street_address' => null,
        'country_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'company_code' => false,
        'company_naic' => false,
        'email' => false,
        'phone' => false,
        'state' => false,
        'display_state' => false,
        'suite' => false,
        'street' => false,
        'city' => false,
        'postal_code' => false,
        'country' => false,
        'countries' => false,
        'address_without_suite' => false,
        'address_with_suite' => false,
        'address_with_suite_and_country' => false,
        'street_address' => false,
        'country_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'company_code' => 'companyCode',
        'company_naic' => 'companyNAIC',
        'email' => 'email',
        'phone' => 'phone',
        'state' => 'state',
        'display_state' => 'displayState',
        'suite' => 'suite',
        'street' => 'street',
        'city' => 'city',
        'postal_code' => 'postalCode',
        'country' => 'country',
        'countries' => 'countries',
        'address_without_suite' => 'addressWithoutSuite',
        'address_with_suite' => 'addressWithSuite',
        'address_with_suite_and_country' => 'addressWithSuiteAndCountry',
        'street_address' => 'streetAddress',
        'country_name' => 'countryName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'company_code' => 'setCompanyCode',
        'company_naic' => 'setCompanyNaic',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'state' => 'setState',
        'display_state' => 'setDisplayState',
        'suite' => 'setSuite',
        'street' => 'setStreet',
        'city' => 'setCity',
        'postal_code' => 'setPostalCode',
        'country' => 'setCountry',
        'countries' => 'setCountries',
        'address_without_suite' => 'setAddressWithoutSuite',
        'address_with_suite' => 'setAddressWithSuite',
        'address_with_suite_and_country' => 'setAddressWithSuiteAndCountry',
        'street_address' => 'setStreetAddress',
        'country_name' => 'setCountryName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'company_code' => 'getCompanyCode',
        'company_naic' => 'getCompanyNaic',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'state' => 'getState',
        'display_state' => 'getDisplayState',
        'suite' => 'getSuite',
        'street' => 'getStreet',
        'city' => 'getCity',
        'postal_code' => 'getPostalCode',
        'country' => 'getCountry',
        'countries' => 'getCountries',
        'address_without_suite' => 'getAddressWithoutSuite',
        'address_with_suite' => 'getAddressWithSuite',
        'address_with_suite_and_country' => 'getAddressWithSuiteAndCountry',
        'street_address' => 'getStreetAddress',
        'country_name' => 'getCountryName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_AL = 'AL';
    public const STATE_AK = 'AK';
    public const STATE_AZ = 'AZ';
    public const STATE_AR = 'AR';
    public const STATE_CA = 'CA';
    public const STATE_CO = 'CO';
    public const STATE_CT = 'CT';
    public const STATE_DC = 'DC';
    public const STATE_DE = 'DE';
    public const STATE_FL = 'FL';
    public const STATE_GA = 'GA';
    public const STATE_HI = 'HI';
    public const STATE_ID = 'ID';
    public const STATE_IL = 'IL';
    public const STATE_IN = 'IN';
    public const STATE_IA = 'IA';
    public const STATE_KS = 'KS';
    public const STATE_KY = 'KY';
    public const STATE_LA = 'LA';
    public const STATE_ME = 'ME';
    public const STATE_MD = 'MD';
    public const STATE_MA = 'MA';
    public const STATE_MI = 'MI';
    public const STATE_MN = 'MN';
    public const STATE_MS = 'MS';
    public const STATE_MO = 'MO';
    public const STATE_MT = 'MT';
    public const STATE_NE = 'NE';
    public const STATE_NV = 'NV';
    public const STATE_NH = 'NH';
    public const STATE_NJ = 'NJ';
    public const STATE_NM = 'NM';
    public const STATE_NY = 'NY';
    public const STATE_NC = 'NC';
    public const STATE_ND = 'ND';
    public const STATE_OH = 'OH';
    public const STATE_OK = 'OK';
    public const STATE__OR = 'OR';
    public const STATE_PA = 'PA';
    public const STATE_RI = 'RI';
    public const STATE_SC = 'SC';
    public const STATE_SD = 'SD';
    public const STATE_TN = 'TN';
    public const STATE_TX = 'TX';
    public const STATE_UT = 'UT';
    public const STATE_VT = 'VT';
    public const STATE_VA = 'VA';
    public const STATE_WA = 'WA';
    public const STATE_WV = 'WV';
    public const STATE_WI = 'WI';
    public const STATE_WY = 'WY';
    public const STATE_VI = 'VI';
    public const STATE_PR = 'PR';
    public const STATE_UK = 'UK';
    public const STATE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_AL,
            self::STATE_AK,
            self::STATE_AZ,
            self::STATE_AR,
            self::STATE_CA,
            self::STATE_CO,
            self::STATE_CT,
            self::STATE_DC,
            self::STATE_DE,
            self::STATE_FL,
            self::STATE_GA,
            self::STATE_HI,
            self::STATE_ID,
            self::STATE_IL,
            self::STATE_IN,
            self::STATE_IA,
            self::STATE_KS,
            self::STATE_KY,
            self::STATE_LA,
            self::STATE_ME,
            self::STATE_MD,
            self::STATE_MA,
            self::STATE_MI,
            self::STATE_MN,
            self::STATE_MS,
            self::STATE_MO,
            self::STATE_MT,
            self::STATE_NE,
            self::STATE_NV,
            self::STATE_NH,
            self::STATE_NJ,
            self::STATE_NM,
            self::STATE_NY,
            self::STATE_NC,
            self::STATE_ND,
            self::STATE_OH,
            self::STATE_OK,
            self::STATE__OR,
            self::STATE_PA,
            self::STATE_RI,
            self::STATE_SC,
            self::STATE_SD,
            self::STATE_TN,
            self::STATE_TX,
            self::STATE_UT,
            self::STATE_VT,
            self::STATE_VA,
            self::STATE_WA,
            self::STATE_WV,
            self::STATE_WI,
            self::STATE_WY,
            self::STATE_VI,
            self::STATE_PR,
            self::STATE_UK,
            self::STATE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('company_code', $data ?? [], null);
        $this->setIfExists('company_naic', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('display_state', $data ?? [], null);
        $this->setIfExists('suite', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('countries', $data ?? [], null);
        $this->setIfExists('address_without_suite', $data ?? [], null);
        $this->setIfExists('address_with_suite', $data ?? [], null);
        $this->setIfExists('address_with_suite_and_country', $data ?? [], null);
        $this->setIfExists('street_address', $data ?? [], null);
        $this->setIfExists('country_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['country']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['country'])) {
            $invalidProperties[] = "invalid value for 'country', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets company_code
     *
     * @return string|null
     */
    public function getCompanyCode()
    {
        return $this->container['company_code'];
    }

    /**
     * Sets company_code
     *
     * @param string|null $company_code company_code
     *
     * @return self
     */
    public function setCompanyCode($company_code)
    {
        if (is_null($company_code)) {
            throw new \InvalidArgumentException('non-nullable company_code cannot be null');
        }
        $this->container['company_code'] = $company_code;

        return $this;
    }

    /**
     * Gets company_naic
     *
     * @return string|null
     */
    public function getCompanyNaic()
    {
        return $this->container['company_naic'];
    }

    /**
     * Sets company_naic
     *
     * @param string|null $company_naic company_naic
     *
     * @return self
     */
    public function setCompanyNaic($company_naic)
    {
        if (is_null($company_naic)) {
            throw new \InvalidArgumentException('non-nullable company_naic cannot be null');
        }
        $this->container['company_naic'] = $company_naic;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets display_state
     *
     * @return string|null
     */
    public function getDisplayState()
    {
        return $this->container['display_state'];
    }

    /**
     * Sets display_state
     *
     * @param string|null $display_state display_state
     *
     * @return self
     */
    public function setDisplayState($display_state)
    {
        if (is_null($display_state)) {
            throw new \InvalidArgumentException('non-nullable display_state cannot be null');
        }
        $this->container['display_state'] = $display_state;

        return $this;
    }

    /**
     * Gets suite
     *
     * @return string|null
     */
    public function getSuite()
    {
        return $this->container['suite'];
    }

    /**
     * Sets suite
     *
     * @param string|null $suite suite
     *
     * @return self
     */
    public function setSuite($suite)
    {
        if (is_null($suite)) {
            throw new \InvalidArgumentException('non-nullable suite cannot be null');
        }
        $this->container['suite'] = $suite;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street street
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            throw new \InvalidArgumentException('non-nullable street cannot be null');
        }
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }

        if ((!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", ObjectSerializer::toString($country)))) {
            throw new \InvalidArgumentException("invalid value for \$country when calling UnderwritingContactModel., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return \Tns\EpayPolicy\Model\LookUpModelByte[]|null
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param \Tns\EpayPolicy\Model\LookUpModelByte[]|null $countries countries
     *
     * @return self
     */
    public function setCountries($countries)
    {
        if (is_null($countries)) {
            throw new \InvalidArgumentException('non-nullable countries cannot be null');
        }
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets address_without_suite
     *
     * @return string|null
     */
    public function getAddressWithoutSuite()
    {
        return $this->container['address_without_suite'];
    }

    /**
     * Sets address_without_suite
     *
     * @param string|null $address_without_suite address_without_suite
     *
     * @return self
     */
    public function setAddressWithoutSuite($address_without_suite)
    {
        if (is_null($address_without_suite)) {
            throw new \InvalidArgumentException('non-nullable address_without_suite cannot be null');
        }
        $this->container['address_without_suite'] = $address_without_suite;

        return $this;
    }

    /**
     * Gets address_with_suite
     *
     * @return string|null
     */
    public function getAddressWithSuite()
    {
        return $this->container['address_with_suite'];
    }

    /**
     * Sets address_with_suite
     *
     * @param string|null $address_with_suite address_with_suite
     *
     * @return self
     */
    public function setAddressWithSuite($address_with_suite)
    {
        if (is_null($address_with_suite)) {
            throw new \InvalidArgumentException('non-nullable address_with_suite cannot be null');
        }
        $this->container['address_with_suite'] = $address_with_suite;

        return $this;
    }

    /**
     * Gets address_with_suite_and_country
     *
     * @return string|null
     */
    public function getAddressWithSuiteAndCountry()
    {
        return $this->container['address_with_suite_and_country'];
    }

    /**
     * Sets address_with_suite_and_country
     *
     * @param string|null $address_with_suite_and_country address_with_suite_and_country
     *
     * @return self
     */
    public function setAddressWithSuiteAndCountry($address_with_suite_and_country)
    {
        if (is_null($address_with_suite_and_country)) {
            throw new \InvalidArgumentException('non-nullable address_with_suite_and_country cannot be null');
        }
        $this->container['address_with_suite_and_country'] = $address_with_suite_and_country;

        return $this;
    }

    /**
     * Gets street_address
     *
     * @return string|null
     */
    public function getStreetAddress()
    {
        return $this->container['street_address'];
    }

    /**
     * Sets street_address
     *
     * @param string|null $street_address street_address
     *
     * @return self
     */
    public function setStreetAddress($street_address)
    {
        if (is_null($street_address)) {
            throw new \InvalidArgumentException('non-nullable street_address cannot be null');
        }
        $this->container['street_address'] = $street_address;

        return $this;
    }

    /**
     * Gets country_name
     *
     * @return string|null
     */
    public function getCountryName()
    {
        return $this->container['country_name'];
    }

    /**
     * Sets country_name
     *
     * @param string|null $country_name country_name
     *
     * @return self
     */
    public function setCountryName($country_name)
    {
        if (is_null($country_name)) {
            throw new \InvalidArgumentException('non-nullable country_name cannot be null');
        }
        $this->container['country_name'] = $country_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


