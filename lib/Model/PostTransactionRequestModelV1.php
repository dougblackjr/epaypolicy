<?php
/**
 * PostTransactionRequestModelV1
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tns\\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * epay3 API 1.0
 *
 * This API supports the processing of credit card and eCheck/ACH payments.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@epay3.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tns\\EpayPolicy\Model;

use \ArrayAccess;
use \Tns\\EpayPolicy\ObjectSerializer;

/**
 * PostTransactionRequestModelV1 Class Doc Comment
 *
 * @category Class
 * @description Represents a financial transaction.
 * @package  Tns\\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostTransactionRequestModelV1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PostTransactionRequestModelV1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'float',
        'payer' => 'string',
        'payer_fee' => 'float',
        'attribute_values' => 'array<string,string>',
        'comments' => 'string',
        'email_address' => 'string',
        'token_id' => 'string',
        'credit_card_information' => '\Tns\\EpayPolicy\Model\CreditCardInformationModel',
        'bank_account_information' => '\Tns\\EpayPolicy\Model\BankAccountInformationModel',
        'authorization_id' => 'string',
        'send_receipt' => 'bool',
        'initiating_party_fee' => 'float',
        'ip_address' => 'string',
        'currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => 'double',
        'payer' => null,
        'payer_fee' => 'double',
        'attribute_values' => null,
        'comments' => null,
        'email_address' => null,
        'token_id' => null,
        'credit_card_information' => null,
        'bank_account_information' => null,
        'authorization_id' => null,
        'send_receipt' => null,
        'initiating_party_fee' => 'double',
        'ip_address' => null,
        'currency' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'payer' => false,
        'payer_fee' => false,
        'attribute_values' => false,
        'comments' => false,
        'email_address' => false,
        'token_id' => false,
        'credit_card_information' => false,
        'bank_account_information' => false,
        'authorization_id' => false,
        'send_receipt' => false,
        'initiating_party_fee' => false,
        'ip_address' => false,
        'currency' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'payer' => 'payer',
        'payer_fee' => 'payerFee',
        'attribute_values' => 'attributeValues',
        'comments' => 'comments',
        'email_address' => 'emailAddress',
        'token_id' => 'tokenId',
        'credit_card_information' => 'creditCardInformation',
        'bank_account_information' => 'bankAccountInformation',
        'authorization_id' => 'authorizationId',
        'send_receipt' => 'sendReceipt',
        'initiating_party_fee' => 'initiatingPartyFee',
        'ip_address' => 'ipAddress',
        'currency' => 'currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'payer' => 'setPayer',
        'payer_fee' => 'setPayerFee',
        'attribute_values' => 'setAttributeValues',
        'comments' => 'setComments',
        'email_address' => 'setEmailAddress',
        'token_id' => 'setTokenId',
        'credit_card_information' => 'setCreditCardInformation',
        'bank_account_information' => 'setBankAccountInformation',
        'authorization_id' => 'setAuthorizationId',
        'send_receipt' => 'setSendReceipt',
        'initiating_party_fee' => 'setInitiatingPartyFee',
        'ip_address' => 'setIpAddress',
        'currency' => 'setCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'payer' => 'getPayer',
        'payer_fee' => 'getPayerFee',
        'attribute_values' => 'getAttributeValues',
        'comments' => 'getComments',
        'email_address' => 'getEmailAddress',
        'token_id' => 'getTokenId',
        'credit_card_information' => 'getCreditCardInformation',
        'bank_account_information' => 'getBankAccountInformation',
        'authorization_id' => 'getAuthorizationId',
        'send_receipt' => 'getSendReceipt',
        'initiating_party_fee' => 'getInitiatingPartyFee',
        'ip_address' => 'getIpAddress',
        'currency' => 'getCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CURRENCY_USD = 'USD';
    public const CURRENCY_CAD = 'CAD';
    public const CURRENCY_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_USD,
            self::CURRENCY_CAD,
            self::CURRENCY_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('payer', $data ?? [], null);
        $this->setIfExists('payer_fee', $data ?? [], null);
        $this->setIfExists('attribute_values', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('token_id', $data ?? [], null);
        $this->setIfExists('credit_card_information', $data ?? [], null);
        $this->setIfExists('bank_account_information', $data ?? [], null);
        $this->setIfExists('authorization_id', $data ?? [], null);
        $this->setIfExists('send_receipt', $data ?? [], null);
        $this->setIfExists('initiating_party_fee', $data ?? [], null);
        $this->setIfExists('ip_address', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] > 1E+7)) {
            $invalidProperties[] = "invalid value for 'amount', must be smaller than or equal to 1E+7.";
        }

        if ($this->container['payer'] === null) {
            $invalidProperties[] = "'payer' can't be null";
        }
        if (!is_null($this->container['payer_fee']) && ($this->container['payer_fee'] > 1E+7)) {
            $invalidProperties[] = "invalid value for 'payer_fee', must be smaller than or equal to 1E+7.";
        }

        if (!is_null($this->container['payer_fee']) && ($this->container['payer_fee'] < 0)) {
            $invalidProperties[] = "invalid value for 'payer_fee', must be bigger than or equal to 0.";
        }

        if ($this->container['email_address'] === null) {
            $invalidProperties[] = "'email_address' can't be null";
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Total amount to charge not including any payer fees.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount > 1E+7)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling PostTransactionRequestModelV1., must be smaller than or equal to 1E+7.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets payer
     *
     * @return string
     */
    public function getPayer()
    {
        return $this->container['payer'];
    }

    /**
     * Sets payer
     *
     * @param string $payer Name of the payer that is shown on the receipt.
     *
     * @return self
     */
    public function setPayer($payer)
    {
        if (is_null($payer)) {
            throw new \InvalidArgumentException('non-nullable payer cannot be null');
        }
        $this->container['payer'] = $payer;

        return $this;
    }

    /**
     * Gets payer_fee
     *
     * @return float|null
     */
    public function getPayerFee()
    {
        return $this->container['payer_fee'];
    }

    /**
     * Sets payer_fee
     *
     * @param float|null $payer_fee Used if the calling application has pre-calculated a payer fee. In that case, the fee will not be re-calculated.
     *
     * @return self
     */
    public function setPayerFee($payer_fee)
    {
        if (is_null($payer_fee)) {
            throw new \InvalidArgumentException('non-nullable payer_fee cannot be null');
        }

        if (($payer_fee > 1E+7)) {
            throw new \InvalidArgumentException('invalid value for $payer_fee when calling PostTransactionRequestModelV1., must be smaller than or equal to 1E+7.');
        }
        if (($payer_fee < 0)) {
            throw new \InvalidArgumentException('invalid value for $payer_fee when calling PostTransactionRequestModelV1., must be bigger than or equal to 0.');
        }

        $this->container['payer_fee'] = $payer_fee;

        return $this;
    }

    /**
     * Gets attribute_values
     *
     * @return array<string,string>|null
     */
    public function getAttributeValues()
    {
        return $this->container['attribute_values'];
    }

    /**
     * Sets attribute_values
     *
     * @param array<string,string>|null $attribute_values Dictionary of custom attribute values. The key in the dictionary is the identifier of the custom attribute.
     *
     * @return self
     */
    public function setAttributeValues($attribute_values)
    {
        if (is_null($attribute_values)) {
            throw new \InvalidArgumentException('non-nullable attribute_values cannot be null');
        }
        $this->container['attribute_values'] = $attribute_values;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Comments that are shown on the receipt.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address The recipient of the emailed receipt.
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        if (is_null($email_address)) {
            throw new \InvalidArgumentException('non-nullable email_address cannot be null');
        }
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets token_id
     *
     * @return string|null
     */
    public function getTokenId()
    {
        return $this->container['token_id'];
    }

    /**
     * Sets token_id
     *
     * @param string|null $token_id Used to reference a previously stored payment token.
     *
     * @return self
     */
    public function setTokenId($token_id)
    {
        if (is_null($token_id)) {
            throw new \InvalidArgumentException('non-nullable token_id cannot be null');
        }
        $this->container['token_id'] = $token_id;

        return $this;
    }

    /**
     * Gets credit_card_information
     *
     * @return \Tns\\EpayPolicy\Model\CreditCardInformationModel|null
     */
    public function getCreditCardInformation()
    {
        return $this->container['credit_card_information'];
    }

    /**
     * Sets credit_card_information
     *
     * @param \Tns\\EpayPolicy\Model\CreditCardInformationModel|null $credit_card_information credit_card_information
     *
     * @return self
     */
    public function setCreditCardInformation($credit_card_information)
    {
        if (is_null($credit_card_information)) {
            throw new \InvalidArgumentException('non-nullable credit_card_information cannot be null');
        }
        $this->container['credit_card_information'] = $credit_card_information;

        return $this;
    }

    /**
     * Gets bank_account_information
     *
     * @return \Tns\\EpayPolicy\Model\BankAccountInformationModel|null
     */
    public function getBankAccountInformation()
    {
        return $this->container['bank_account_information'];
    }

    /**
     * Sets bank_account_information
     *
     * @param \Tns\\EpayPolicy\Model\BankAccountInformationModel|null $bank_account_information bank_account_information
     *
     * @return self
     */
    public function setBankAccountInformation($bank_account_information)
    {
        if (is_null($bank_account_information)) {
            throw new \InvalidArgumentException('non-nullable bank_account_information cannot be null');
        }
        $this->container['bank_account_information'] = $bank_account_information;

        return $this;
    }

    /**
     * Gets authorization_id
     *
     * @return string|null
     */
    public function getAuthorizationId()
    {
        return $this->container['authorization_id'];
    }

    /**
     * Sets authorization_id
     *
     * @param string|null $authorization_id Used when executing a capture on authorizations that were obtained via this service.
     *
     * @return self
     */
    public function setAuthorizationId($authorization_id)
    {
        if (is_null($authorization_id)) {
            throw new \InvalidArgumentException('non-nullable authorization_id cannot be null');
        }
        $this->container['authorization_id'] = $authorization_id;

        return $this;
    }

    /**
     * Gets send_receipt
     *
     * @return bool|null
     */
    public function getSendReceipt()
    {
        return $this->container['send_receipt'];
    }

    /**
     * Sets send_receipt
     *
     * @param bool|null $send_receipt Set to true if the payer and account holder(s) should receive an e-receipt.
     *
     * @return self
     */
    public function setSendReceipt($send_receipt)
    {
        if (is_null($send_receipt)) {
            throw new \InvalidArgumentException('non-nullable send_receipt cannot be null');
        }
        $this->container['send_receipt'] = $send_receipt;

        return $this;
    }

    /**
     * Gets initiating_party_fee
     *
     * @return float|null
     */
    public function getInitiatingPartyFee()
    {
        return $this->container['initiating_party_fee'];
    }

    /**
     * Sets initiating_party_fee
     *
     * @param float|null $initiating_party_fee The fee being charged by the initiating party of this transaction. This does not include the standard transaction fees.
     *
     * @return self
     */
    public function setInitiatingPartyFee($initiating_party_fee)
    {
        if (is_null($initiating_party_fee)) {
            throw new \InvalidArgumentException('non-nullable initiating_party_fee cannot be null');
        }
        $this->container['initiating_party_fee'] = $initiating_party_fee;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address The IP Address of the payer.
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        if (is_null($ip_address)) {
            throw new \InvalidArgumentException('non-nullable ip_address cannot be null');
        }
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


