<?php
/**
 * PaidInvoiceModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tns\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * epay3 API 1.0
 *
 * This API supports the processing of credit card and eCheck/ACH payments.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@epay3.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tns\EpayPolicy\Model;

use \ArrayAccess;
use \Tns\EpayPolicy\ObjectSerializer;

/**
 * PaidInvoiceModel Class Doc Comment
 *
 * @category Class
 * @package  Tns\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaidInvoiceModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaidInvoiceModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'paid_amount' => 'float',
        'finance_down_payment' => 'float',
        'financed_amount' => 'float',
        'comment' => 'string',
        'division' => 'string',
        'due_date' => '\DateTime',
        'attribute_values' => 'array<string,string>',
        'search_attribute_values' => 'array<string,string>',
        'managed_invoice_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'paid_amount' => 'double',
        'finance_down_payment' => 'double',
        'financed_amount' => 'double',
        'comment' => null,
        'division' => null,
        'due_date' => 'date-time',
        'attribute_values' => null,
        'search_attribute_values' => null,
        'managed_invoice_id' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'paid_amount' => false,
        'finance_down_payment' => false,
        'financed_amount' => false,
        'comment' => false,
        'division' => false,
        'due_date' => false,
        'attribute_values' => false,
        'search_attribute_values' => false,
        'managed_invoice_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'paid_amount' => 'paidAmount',
        'finance_down_payment' => 'financeDownPayment',
        'financed_amount' => 'financedAmount',
        'comment' => 'comment',
        'division' => 'division',
        'due_date' => 'dueDate',
        'attribute_values' => 'attributeValues',
        'search_attribute_values' => 'searchAttributeValues',
        'managed_invoice_id' => 'managedInvoiceId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'paid_amount' => 'setPaidAmount',
        'finance_down_payment' => 'setFinanceDownPayment',
        'financed_amount' => 'setFinancedAmount',
        'comment' => 'setComment',
        'division' => 'setDivision',
        'due_date' => 'setDueDate',
        'attribute_values' => 'setAttributeValues',
        'search_attribute_values' => 'setSearchAttributeValues',
        'managed_invoice_id' => 'setManagedInvoiceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'paid_amount' => 'getPaidAmount',
        'finance_down_payment' => 'getFinanceDownPayment',
        'financed_amount' => 'getFinancedAmount',
        'comment' => 'getComment',
        'division' => 'getDivision',
        'due_date' => 'getDueDate',
        'attribute_values' => 'getAttributeValues',
        'search_attribute_values' => 'getSearchAttributeValues',
        'managed_invoice_id' => 'getManagedInvoiceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('paid_amount', $data ?? [], null);
        $this->setIfExists('finance_down_payment', $data ?? [], null);
        $this->setIfExists('financed_amount', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('division', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('attribute_values', $data ?? [], null);
        $this->setIfExists('search_attribute_values', $data ?? [], null);
        $this->setIfExists('managed_invoice_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for the invoice.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets paid_amount
     *
     * @return float|null
     */
    public function getPaidAmount()
    {
        return $this->container['paid_amount'];
    }

    /**
     * Sets paid_amount
     *
     * @param float|null $paid_amount The amount being paid on the given invoice.
     *
     * @return self
     */
    public function setPaidAmount($paid_amount)
    {
        if (is_null($paid_amount)) {
            throw new \InvalidArgumentException('non-nullable paid_amount cannot be null');
        }
        $this->container['paid_amount'] = $paid_amount;

        return $this;
    }

    /**
     * Gets finance_down_payment
     *
     * @return float|null
     */
    public function getFinanceDownPayment()
    {
        return $this->container['finance_down_payment'];
    }

    /**
     * Sets finance_down_payment
     *
     * @param float|null $finance_down_payment The amount of financed down payment for the given invoice
     *
     * @return self
     */
    public function setFinanceDownPayment($finance_down_payment)
    {
        if (is_null($finance_down_payment)) {
            throw new \InvalidArgumentException('non-nullable finance_down_payment cannot be null');
        }
        $this->container['finance_down_payment'] = $finance_down_payment;

        return $this;
    }

    /**
     * Gets financed_amount
     *
     * @return float|null
     */
    public function getFinancedAmount()
    {
        return $this->container['financed_amount'];
    }

    /**
     * Sets financed_amount
     *
     * @param float|null $financed_amount The amount of the invoice that has been financed.
     *
     * @return self
     */
    public function setFinancedAmount($financed_amount)
    {
        if (is_null($financed_amount)) {
            throw new \InvalidArgumentException('non-nullable financed_amount cannot be null');
        }
        $this->container['financed_amount'] = $financed_amount;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comments by the payer for the paid invoice.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string|null
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string|null $division Division for routing funds.
     *
     * @return self
     */
    public function setDivision($division)
    {
        if (is_null($division)) {
            throw new \InvalidArgumentException('non-nullable division cannot be null');
        }
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date Date Invoice is Due.
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets attribute_values
     *
     * @return array<string,string>|null
     */
    public function getAttributeValues()
    {
        return $this->container['attribute_values'];
    }

    /**
     * Sets attribute_values
     *
     * @param array<string,string>|null $attribute_values Attribute values to be saved with the paid invoice. This is used by the payment page.
     *
     * @return self
     */
    public function setAttributeValues($attribute_values)
    {
        if (is_null($attribute_values)) {
            throw new \InvalidArgumentException('non-nullable attribute_values cannot be null');
        }
        $this->container['attribute_values'] = $attribute_values;

        return $this;
    }

    /**
     * Gets search_attribute_values
     *
     * @return array<string,string>|null
     */
    public function getSearchAttributeValues()
    {
        return $this->container['search_attribute_values'];
    }

    /**
     * Sets search_attribute_values
     *
     * @param array<string,string>|null $search_attribute_values Attribute values to locate this invoice in its management system.
     *
     * @return self
     */
    public function setSearchAttributeValues($search_attribute_values)
    {
        if (is_null($search_attribute_values)) {
            throw new \InvalidArgumentException('non-nullable search_attribute_values cannot be null');
        }
        $this->container['search_attribute_values'] = $search_attribute_values;

        return $this;
    }

    /**
     * Gets managed_invoice_id
     *
     * @return int|null
     */
    public function getManagedInvoiceId()
    {
        return $this->container['managed_invoice_id'];
    }

    /**
     * Sets managed_invoice_id
     *
     * @param int|null $managed_invoice_id Managed Invoice Id.
     *
     * @return self
     */
    public function setManagedInvoiceId($managed_invoice_id)
    {
        if (is_null($managed_invoice_id)) {
            throw new \InvalidArgumentException('non-nullable managed_invoice_id cannot be null');
        }
        $this->container['managed_invoice_id'] = $managed_invoice_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


