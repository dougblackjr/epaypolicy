<?php
/**
 * PostCreateManagedInvoicesFinanceRequestModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tns\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * epay3 API 1.0
 *
 * This API supports the processing of credit card and eCheck/ACH payments.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@epay3.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tns\EpayPolicy\Model;

use \ArrayAccess;
use \Tns\EpayPolicy\ObjectSerializer;

/**
 * PostCreateManagedInvoicesFinanceRequestModel Class Doc Comment
 *
 * @category Class
 * @package  Tns\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostCreateManagedInvoicesFinanceRequestModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PostCreateManagedInvoicesFinanceRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'policy_number' => 'string',
        'effective_date' => '\DateTime',
        'expiration_date' => '\DateTime',
        'line_of_business' => 'string',
        'business_type' => 'string',
        'minimum_earned_percentage' => 'float',
        'number_of_days_to_cancel' => 'int',
        'invoice_auditable' => 'bool',
        'insured_contact' => '\Tns\EpayPolicy\Model\PostCreateManagedInvoicesContactModel',
        'carrier_contact' => '\Tns\EpayPolicy\Model\PostCreateManagedInvoicesContactModel',
        'mga_contact' => '\Tns\EpayPolicy\Model\PostCreateManagedInvoicesContactModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'policy_number' => null,
        'effective_date' => 'date-time',
        'expiration_date' => 'date-time',
        'line_of_business' => null,
        'business_type' => null,
        'minimum_earned_percentage' => 'double',
        'number_of_days_to_cancel' => 'int32',
        'invoice_auditable' => null,
        'insured_contact' => null,
        'carrier_contact' => null,
        'mga_contact' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'policy_number' => false,
        'effective_date' => false,
        'expiration_date' => false,
        'line_of_business' => false,
        'business_type' => false,
        'minimum_earned_percentage' => false,
        'number_of_days_to_cancel' => false,
        'invoice_auditable' => false,
        'insured_contact' => false,
        'carrier_contact' => false,
        'mga_contact' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'policy_number' => 'policyNumber',
        'effective_date' => 'effectiveDate',
        'expiration_date' => 'expirationDate',
        'line_of_business' => 'lineOfBusiness',
        'business_type' => 'businessType',
        'minimum_earned_percentage' => 'minimumEarnedPercentage',
        'number_of_days_to_cancel' => 'numberOfDaysToCancel',
        'invoice_auditable' => 'invoiceAuditable',
        'insured_contact' => 'insuredContact',
        'carrier_contact' => 'carrierContact',
        'mga_contact' => 'mgaContact'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'policy_number' => 'setPolicyNumber',
        'effective_date' => 'setEffectiveDate',
        'expiration_date' => 'setExpirationDate',
        'line_of_business' => 'setLineOfBusiness',
        'business_type' => 'setBusinessType',
        'minimum_earned_percentage' => 'setMinimumEarnedPercentage',
        'number_of_days_to_cancel' => 'setNumberOfDaysToCancel',
        'invoice_auditable' => 'setInvoiceAuditable',
        'insured_contact' => 'setInsuredContact',
        'carrier_contact' => 'setCarrierContact',
        'mga_contact' => 'setMgaContact'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'policy_number' => 'getPolicyNumber',
        'effective_date' => 'getEffectiveDate',
        'expiration_date' => 'getExpirationDate',
        'line_of_business' => 'getLineOfBusiness',
        'business_type' => 'getBusinessType',
        'minimum_earned_percentage' => 'getMinimumEarnedPercentage',
        'number_of_days_to_cancel' => 'getNumberOfDaysToCancel',
        'invoice_auditable' => 'getInvoiceAuditable',
        'insured_contact' => 'getInsuredContact',
        'carrier_contact' => 'getCarrierContact',
        'mga_contact' => 'getMgaContact'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BUSINESS_TYPE_COMMERCIAL = 'Commercial';
    public const BUSINESS_TYPE_PERSONAL = 'Personal';
    public const BUSINESS_TYPE_OTHER = 'Other';
    public const BUSINESS_TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBusinessTypeAllowableValues()
    {
        return [
            self::BUSINESS_TYPE_COMMERCIAL,
            self::BUSINESS_TYPE_PERSONAL,
            self::BUSINESS_TYPE_OTHER,
            self::BUSINESS_TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('policy_number', $data ?? [], null);
        $this->setIfExists('effective_date', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('line_of_business', $data ?? [], null);
        $this->setIfExists('business_type', $data ?? [], null);
        $this->setIfExists('minimum_earned_percentage', $data ?? [], null);
        $this->setIfExists('number_of_days_to_cancel', $data ?? [], null);
        $this->setIfExists('invoice_auditable', $data ?? [], null);
        $this->setIfExists('insured_contact', $data ?? [], null);
        $this->setIfExists('carrier_contact', $data ?? [], null);
        $this->setIfExists('mga_contact', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['line_of_business'] === null) {
            $invalidProperties[] = "'line_of_business' can't be null";
        }
        if ($this->container['business_type'] === null) {
            $invalidProperties[] = "'business_type' can't be null";
        }
        $allowedValues = $this->getBusinessTypeAllowableValues();
        if (!is_null($this->container['business_type']) && !in_array($this->container['business_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'business_type', must be one of '%s'",
                $this->container['business_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['insured_contact'] === null) {
            $invalidProperties[] = "'insured_contact' can't be null";
        }
        if ($this->container['carrier_contact'] === null) {
            $invalidProperties[] = "'carrier_contact' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets policy_number
     *
     * @return string|null
     */
    public function getPolicyNumber()
    {
        return $this->container['policy_number'];
    }

    /**
     * Sets policy_number
     *
     * @param string|null $policy_number policy_number
     *
     * @return self
     */
    public function setPolicyNumber($policy_number)
    {
        if (is_null($policy_number)) {
            throw new \InvalidArgumentException('non-nullable policy_number cannot be null');
        }
        $this->container['policy_number'] = $policy_number;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime|null
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime|null $effective_date effective_date
     *
     * @return self
     */
    public function setEffectiveDate($effective_date)
    {
        if (is_null($effective_date)) {
            throw new \InvalidArgumentException('non-nullable effective_date cannot be null');
        }
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date expiration_date
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets line_of_business
     *
     * @return string
     */
    public function getLineOfBusiness()
    {
        return $this->container['line_of_business'];
    }

    /**
     * Sets line_of_business
     *
     * @param string $line_of_business line_of_business
     *
     * @return self
     */
    public function setLineOfBusiness($line_of_business)
    {
        if (is_null($line_of_business)) {
            throw new \InvalidArgumentException('non-nullable line_of_business cannot be null');
        }
        $this->container['line_of_business'] = $line_of_business;

        return $this;
    }

    /**
     * Gets business_type
     *
     * @return string
     */
    public function getBusinessType()
    {
        return $this->container['business_type'];
    }

    /**
     * Sets business_type
     *
     * @param string $business_type business_type
     *
     * @return self
     */
    public function setBusinessType($business_type)
    {
        if (is_null($business_type)) {
            throw new \InvalidArgumentException('non-nullable business_type cannot be null');
        }
        $allowedValues = $this->getBusinessTypeAllowableValues();
        if (!in_array($business_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'business_type', must be one of '%s'",
                    $business_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['business_type'] = $business_type;

        return $this;
    }

    /**
     * Gets minimum_earned_percentage
     *
     * @return float|null
     */
    public function getMinimumEarnedPercentage()
    {
        return $this->container['minimum_earned_percentage'];
    }

    /**
     * Sets minimum_earned_percentage
     *
     * @param float|null $minimum_earned_percentage minimum_earned_percentage
     *
     * @return self
     */
    public function setMinimumEarnedPercentage($minimum_earned_percentage)
    {
        if (is_null($minimum_earned_percentage)) {
            throw new \InvalidArgumentException('non-nullable minimum_earned_percentage cannot be null');
        }
        $this->container['minimum_earned_percentage'] = $minimum_earned_percentage;

        return $this;
    }

    /**
     * Gets number_of_days_to_cancel
     *
     * @return int|null
     */
    public function getNumberOfDaysToCancel()
    {
        return $this->container['number_of_days_to_cancel'];
    }

    /**
     * Sets number_of_days_to_cancel
     *
     * @param int|null $number_of_days_to_cancel number_of_days_to_cancel
     *
     * @return self
     */
    public function setNumberOfDaysToCancel($number_of_days_to_cancel)
    {
        if (is_null($number_of_days_to_cancel)) {
            throw new \InvalidArgumentException('non-nullable number_of_days_to_cancel cannot be null');
        }
        $this->container['number_of_days_to_cancel'] = $number_of_days_to_cancel;

        return $this;
    }

    /**
     * Gets invoice_auditable
     *
     * @return bool|null
     */
    public function getInvoiceAuditable()
    {
        return $this->container['invoice_auditable'];
    }

    /**
     * Sets invoice_auditable
     *
     * @param bool|null $invoice_auditable invoice_auditable
     *
     * @return self
     */
    public function setInvoiceAuditable($invoice_auditable)
    {
        if (is_null($invoice_auditable)) {
            throw new \InvalidArgumentException('non-nullable invoice_auditable cannot be null');
        }
        $this->container['invoice_auditable'] = $invoice_auditable;

        return $this;
    }

    /**
     * Gets insured_contact
     *
     * @return \Tns\EpayPolicy\Model\PostCreateManagedInvoicesContactModel
     */
    public function getInsuredContact()
    {
        return $this->container['insured_contact'];
    }

    /**
     * Sets insured_contact
     *
     * @param \Tns\EpayPolicy\Model\PostCreateManagedInvoicesContactModel $insured_contact insured_contact
     *
     * @return self
     */
    public function setInsuredContact($insured_contact)
    {
        if (is_null($insured_contact)) {
            throw new \InvalidArgumentException('non-nullable insured_contact cannot be null');
        }
        $this->container['insured_contact'] = $insured_contact;

        return $this;
    }

    /**
     * Gets carrier_contact
     *
     * @return \Tns\EpayPolicy\Model\PostCreateManagedInvoicesContactModel
     */
    public function getCarrierContact()
    {
        return $this->container['carrier_contact'];
    }

    /**
     * Sets carrier_contact
     *
     * @param \Tns\EpayPolicy\Model\PostCreateManagedInvoicesContactModel $carrier_contact carrier_contact
     *
     * @return self
     */
    public function setCarrierContact($carrier_contact)
    {
        if (is_null($carrier_contact)) {
            throw new \InvalidArgumentException('non-nullable carrier_contact cannot be null');
        }
        $this->container['carrier_contact'] = $carrier_contact;

        return $this;
    }

    /**
     * Gets mga_contact
     *
     * @return \Tns\EpayPolicy\Model\PostCreateManagedInvoicesContactModel|null
     */
    public function getMgaContact()
    {
        return $this->container['mga_contact'];
    }

    /**
     * Sets mga_contact
     *
     * @param \Tns\EpayPolicy\Model\PostCreateManagedInvoicesContactModel|null $mga_contact mga_contact
     *
     * @return self
     */
    public function setMgaContact($mga_contact)
    {
        if (is_null($mga_contact)) {
            throw new \InvalidArgumentException('non-nullable mga_contact cannot be null');
        }
        $this->container['mga_contact'] = $mga_contact;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


