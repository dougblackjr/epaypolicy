<?php
/**
 * GetManagedInvoiceResponseModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Tns\\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * epay3 API 1.0
 *
 * This API supports the processing of credit card and eCheck/ACH payments.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@epay3.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tns\\EpayPolicy\Model;

use \ArrayAccess;
use \Tns\\EpayPolicy\ObjectSerializer;

/**
 * GetManagedInvoiceResponseModel Class Doc Comment
 *
 * @category Class
 * @package  Tns\\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetManagedInvoiceResponseModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetManagedInvoiceResponseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'public_id' => 'string',
        'account_name' => 'string',
        'payer' => 'string',
        'create_date' => '\DateTime',
        'created_by_user' => 'string',
        'due_date' => '\DateTime',
        'status' => 'string',
        'invoice_total' => 'float',
        'cancel_date' => '\DateTime',
        'complete_date' => '\DateTime',
        'off_platform_date' => '\DateTime',
        'quick_quote_date' => '\DateTime',
        'email_send_date' => '\DateTime',
        'line_items' => '\Tns\\EpayPolicy\Model\QuoteInvoiceLineItem[]',
        'taxes' => '\Tns\\EpayPolicy\Model\QuoteInvoiceLineItem[]',
        'fees' => '\Tns\\EpayPolicy\Model\QuoteInvoiceLineItem[]',
        'financing_info' => '\Tns\\EpayPolicy\Model\QuoteInvoiceFinancingInfoModel',
        'quick_quote' => '\Tns\\EpayPolicy\Model\QuickQuoteModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'public_id' => null,
        'account_name' => null,
        'payer' => null,
        'create_date' => 'date-time',
        'created_by_user' => null,
        'due_date' => 'date-time',
        'status' => null,
        'invoice_total' => 'double',
        'cancel_date' => 'date-time',
        'complete_date' => 'date-time',
        'off_platform_date' => 'date-time',
        'quick_quote_date' => 'date-time',
        'email_send_date' => 'date-time',
        'line_items' => null,
        'taxes' => null,
        'fees' => null,
        'financing_info' => null,
        'quick_quote' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'public_id' => false,
        'account_name' => false,
        'payer' => false,
        'create_date' => false,
        'created_by_user' => false,
        'due_date' => false,
        'status' => false,
        'invoice_total' => false,
        'cancel_date' => false,
        'complete_date' => false,
        'off_platform_date' => false,
        'quick_quote_date' => false,
        'email_send_date' => false,
        'line_items' => false,
        'taxes' => false,
        'fees' => false,
        'financing_info' => false,
        'quick_quote' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'public_id' => 'publicId',
        'account_name' => 'accountName',
        'payer' => 'payer',
        'create_date' => 'createDate',
        'created_by_user' => 'createdByUser',
        'due_date' => 'dueDate',
        'status' => 'status',
        'invoice_total' => 'invoiceTotal',
        'cancel_date' => 'cancelDate',
        'complete_date' => 'completeDate',
        'off_platform_date' => 'offPlatformDate',
        'quick_quote_date' => 'quickQuoteDate',
        'email_send_date' => 'emailSendDate',
        'line_items' => 'lineItems',
        'taxes' => 'taxes',
        'fees' => 'fees',
        'financing_info' => 'financingInfo',
        'quick_quote' => 'quickQuote'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'public_id' => 'setPublicId',
        'account_name' => 'setAccountName',
        'payer' => 'setPayer',
        'create_date' => 'setCreateDate',
        'created_by_user' => 'setCreatedByUser',
        'due_date' => 'setDueDate',
        'status' => 'setStatus',
        'invoice_total' => 'setInvoiceTotal',
        'cancel_date' => 'setCancelDate',
        'complete_date' => 'setCompleteDate',
        'off_platform_date' => 'setOffPlatformDate',
        'quick_quote_date' => 'setQuickQuoteDate',
        'email_send_date' => 'setEmailSendDate',
        'line_items' => 'setLineItems',
        'taxes' => 'setTaxes',
        'fees' => 'setFees',
        'financing_info' => 'setFinancingInfo',
        'quick_quote' => 'setQuickQuote'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'public_id' => 'getPublicId',
        'account_name' => 'getAccountName',
        'payer' => 'getPayer',
        'create_date' => 'getCreateDate',
        'created_by_user' => 'getCreatedByUser',
        'due_date' => 'getDueDate',
        'status' => 'getStatus',
        'invoice_total' => 'getInvoiceTotal',
        'cancel_date' => 'getCancelDate',
        'complete_date' => 'getCompleteDate',
        'off_platform_date' => 'getOffPlatformDate',
        'quick_quote_date' => 'getQuickQuoteDate',
        'email_send_date' => 'getEmailSendDate',
        'line_items' => 'getLineItems',
        'taxes' => 'getTaxes',
        'fees' => 'getFees',
        'financing_info' => 'getFinancingInfo',
        'quick_quote' => 'getQuickQuote'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('public_id', $data ?? [], null);
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('payer', $data ?? [], null);
        $this->setIfExists('create_date', $data ?? [], null);
        $this->setIfExists('created_by_user', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('invoice_total', $data ?? [], null);
        $this->setIfExists('cancel_date', $data ?? [], null);
        $this->setIfExists('complete_date', $data ?? [], null);
        $this->setIfExists('off_platform_date', $data ?? [], null);
        $this->setIfExists('quick_quote_date', $data ?? [], null);
        $this->setIfExists('email_send_date', $data ?? [], null);
        $this->setIfExists('line_items', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
        $this->setIfExists('financing_info', $data ?? [], null);
        $this->setIfExists('quick_quote', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets public_id
     *
     * @return string|null
     */
    public function getPublicId()
    {
        return $this->container['public_id'];
    }

    /**
     * Sets public_id
     *
     * @param string|null $public_id The Public identifier of the managed invoice.
     *
     * @return self
     */
    public function setPublicId($public_id)
    {
        if (is_null($public_id)) {
            throw new \InvalidArgumentException('non-nullable public_id cannot be null');
        }
        $this->container['public_id'] = $public_id;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name The name of the account.
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        if (is_null($account_name)) {
            throw new \InvalidArgumentException('non-nullable account_name cannot be null');
        }
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets payer
     *
     * @return string|null
     */
    public function getPayer()
    {
        return $this->container['payer'];
    }

    /**
     * Sets payer
     *
     * @param string|null $payer The name of the payer.
     *
     * @return self
     */
    public function setPayer($payer)
    {
        if (is_null($payer)) {
            throw new \InvalidArgumentException('non-nullable payer cannot be null');
        }
        $this->container['payer'] = $payer;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime|null
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime|null $create_date The date when invoice was created.
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        if (is_null($create_date)) {
            throw new \InvalidArgumentException('non-nullable create_date cannot be null');
        }
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return string|null
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param string|null $created_by_user The user who created the invoice.
     *
     * @return self
     */
    public function setCreatedByUser($created_by_user)
    {
        if (is_null($created_by_user)) {
            throw new \InvalidArgumentException('non-nullable created_by_user cannot be null');
        }
        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date The expiration date.
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Represents the current status of the invoice.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets invoice_total
     *
     * @return float|null
     */
    public function getInvoiceTotal()
    {
        return $this->container['invoice_total'];
    }

    /**
     * Sets invoice_total
     *
     * @param float|null $invoice_total The sum of all charges specified on invoice.
     *
     * @return self
     */
    public function setInvoiceTotal($invoice_total)
    {
        if (is_null($invoice_total)) {
            throw new \InvalidArgumentException('non-nullable invoice_total cannot be null');
        }
        $this->container['invoice_total'] = $invoice_total;

        return $this;
    }

    /**
     * Gets cancel_date
     *
     * @return \DateTime|null
     */
    public function getCancelDate()
    {
        return $this->container['cancel_date'];
    }

    /**
     * Sets cancel_date
     *
     * @param \DateTime|null $cancel_date The date when invoice was cancelled or voided.
     *
     * @return self
     */
    public function setCancelDate($cancel_date)
    {
        if (is_null($cancel_date)) {
            throw new \InvalidArgumentException('non-nullable cancel_date cannot be null');
        }
        $this->container['cancel_date'] = $cancel_date;

        return $this;
    }

    /**
     * Gets complete_date
     *
     * @return \DateTime|null
     */
    public function getCompleteDate()
    {
        return $this->container['complete_date'];
    }

    /**
     * Sets complete_date
     *
     * @param \DateTime|null $complete_date The date when invoice was completed or paid.
     *
     * @return self
     */
    public function setCompleteDate($complete_date)
    {
        if (is_null($complete_date)) {
            throw new \InvalidArgumentException('non-nullable complete_date cannot be null');
        }
        $this->container['complete_date'] = $complete_date;

        return $this;
    }

    /**
     * Gets off_platform_date
     *
     * @return \DateTime|null
     */
    public function getOffPlatformDate()
    {
        return $this->container['off_platform_date'];
    }

    /**
     * Sets off_platform_date
     *
     * @param \DateTime|null $off_platform_date The date when invoice was completed or paid Offplatform.
     *
     * @return self
     */
    public function setOffPlatformDate($off_platform_date)
    {
        if (is_null($off_platform_date)) {
            throw new \InvalidArgumentException('non-nullable off_platform_date cannot be null');
        }
        $this->container['off_platform_date'] = $off_platform_date;

        return $this;
    }

    /**
     * Gets quick_quote_date
     *
     * @return \DateTime|null
     */
    public function getQuickQuoteDate()
    {
        return $this->container['quick_quote_date'];
    }

    /**
     * Sets quick_quote_date
     *
     * @param \DateTime|null $quick_quote_date The date when quick quote was retrieved to check for financing.
     *
     * @return self
     */
    public function setQuickQuoteDate($quick_quote_date)
    {
        if (is_null($quick_quote_date)) {
            throw new \InvalidArgumentException('non-nullable quick_quote_date cannot be null');
        }
        $this->container['quick_quote_date'] = $quick_quote_date;

        return $this;
    }

    /**
     * Gets email_send_date
     *
     * @return \DateTime|null
     */
    public function getEmailSendDate()
    {
        return $this->container['email_send_date'];
    }

    /**
     * Sets email_send_date
     *
     * @param \DateTime|null $email_send_date The date when an email was sent to the payer.
     *
     * @return self
     */
    public function setEmailSendDate($email_send_date)
    {
        if (is_null($email_send_date)) {
            throw new \InvalidArgumentException('non-nullable email_send_date cannot be null');
        }
        $this->container['email_send_date'] = $email_send_date;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \Tns\\EpayPolicy\Model\QuoteInvoiceLineItem[]|null
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \Tns\\EpayPolicy\Model\QuoteInvoiceLineItem[]|null $line_items line_items
     *
     * @return self
     */
    public function setLineItems($line_items)
    {
        if (is_null($line_items)) {
            throw new \InvalidArgumentException('non-nullable line_items cannot be null');
        }
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \Tns\\EpayPolicy\Model\QuoteInvoiceLineItem[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \Tns\\EpayPolicy\Model\QuoteInvoiceLineItem[]|null $taxes taxes
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \Tns\\EpayPolicy\Model\QuoteInvoiceLineItem[]|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \Tns\\EpayPolicy\Model\QuoteInvoiceLineItem[]|null $fees fees
     *
     * @return self
     */
    public function setFees($fees)
    {
        if (is_null($fees)) {
            throw new \InvalidArgumentException('non-nullable fees cannot be null');
        }
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets financing_info
     *
     * @return \Tns\\EpayPolicy\Model\QuoteInvoiceFinancingInfoModel|null
     */
    public function getFinancingInfo()
    {
        return $this->container['financing_info'];
    }

    /**
     * Sets financing_info
     *
     * @param \Tns\\EpayPolicy\Model\QuoteInvoiceFinancingInfoModel|null $financing_info financing_info
     *
     * @return self
     */
    public function setFinancingInfo($financing_info)
    {
        if (is_null($financing_info)) {
            throw new \InvalidArgumentException('non-nullable financing_info cannot be null');
        }
        $this->container['financing_info'] = $financing_info;

        return $this;
    }

    /**
     * Gets quick_quote
     *
     * @return \Tns\\EpayPolicy\Model\QuickQuoteModel|null
     */
    public function getQuickQuote()
    {
        return $this->container['quick_quote'];
    }

    /**
     * Sets quick_quote
     *
     * @param \Tns\\EpayPolicy\Model\QuickQuoteModel|null $quick_quote quick_quote
     *
     * @return self
     */
    public function setQuickQuote($quick_quote)
    {
        if (is_null($quick_quote)) {
            throw new \InvalidArgumentException('non-nullable quick_quote cannot be null');
        }
        $this->container['quick_quote'] = $quick_quote;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


