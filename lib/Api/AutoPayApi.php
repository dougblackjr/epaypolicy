<?php
/**
 * AutoPayApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Tns\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * epay3 API 1.0
 *
 * This API supports the processing of credit card and eCheck/ACH payments.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@epay3.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tns\EpayPolicy\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Tns\EpayPolicy\ApiException;
use Tns\EpayPolicy\Configuration;
use Tns\EpayPolicy\HeaderSelector;
use Tns\EpayPolicy\ObjectSerializer;

/**
 * AutoPayApi Class Doc Comment
 *
 * @category Class
 * @package  Tns\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AutoPayApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'autoPayCancel' => [
            'application/json',
        ],
        'autoPayGet' => [
            'application/json',
        ],
        'autoPayPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'autoPaySearch' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation autoPayCancel
     *
     * Cancels an active Auto Pay.
     *
     * @param  int $id The Id of the AutoPay. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPayCancel'] to see the possible values for this operation
     *
     * @throws \Tns\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function autoPayCancel($id, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPayCancel'][0])
    {
        $this->autoPayCancelWithHttpInfo($id, $impersonation_account_key, $contentType);
    }

    /**
     * Operation autoPayCancelWithHttpInfo
     *
     * Cancels an active Auto Pay.
     *
     * @param  int $id The Id of the AutoPay. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPayCancel'] to see the possible values for this operation
     *
     * @throws \Tns\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function autoPayCancelWithHttpInfo($id, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPayCancel'][0])
    {
        $request = $this->autoPayCancelRequest($id, $impersonation_account_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,object>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation autoPayCancelAsync
     *
     * Cancels an active Auto Pay.
     *
     * @param  int $id The Id of the AutoPay. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPayCancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function autoPayCancelAsync($id, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPayCancel'][0])
    {
        return $this->autoPayCancelAsyncWithHttpInfo($id, $impersonation_account_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation autoPayCancelAsyncWithHttpInfo
     *
     * Cancels an active Auto Pay.
     *
     * @param  int $id The Id of the AutoPay. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPayCancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function autoPayCancelAsyncWithHttpInfo($id, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPayCancel'][0])
    {
        $returnType = '';
        $request = $this->autoPayCancelRequest($id, $impersonation_account_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'autoPayCancel'
     *
     * @param  int $id The Id of the AutoPay. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPayCancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function autoPayCancelRequest($id, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPayCancel'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling autoPayCancel'
            );
        }



        $resourcePath = '/api/v1/autoPay/{id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($impersonation_account_key !== null) {
            $headerParams['impersonationAccountKey'] = ObjectSerializer::toHeaderValue($impersonation_account_key);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation autoPayGet
     *
     * Retrieves the details of an AutoPay.
     *
     * @param  int $id The Id of the AutoPay. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the token is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPayGet'] to see the possible values for this operation
     *
     * @throws \Tns\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tns\EpayPolicy\Model\GetAutoPayResponseModel|array<string,object>
     */
    public function autoPayGet($id, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPayGet'][0])
    {
        list($response) = $this->autoPayGetWithHttpInfo($id, $impersonation_account_key, $contentType);
        return $response;
    }

    /**
     * Operation autoPayGetWithHttpInfo
     *
     * Retrieves the details of an AutoPay.
     *
     * @param  int $id The Id of the AutoPay. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the token is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPayGet'] to see the possible values for this operation
     *
     * @throws \Tns\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tns\EpayPolicy\Model\GetAutoPayResponseModel|array<string,object>, HTTP status code, HTTP response headers (array of strings)
     */
    public function autoPayGetWithHttpInfo($id, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPayGet'][0])
    {
        $request = $this->autoPayGetRequest($id, $impersonation_account_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tns\EpayPolicy\Model\GetAutoPayResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tns\EpayPolicy\Model\GetAutoPayResponseModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tns\EpayPolicy\Model\GetAutoPayResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,object>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,object>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,object>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tns\EpayPolicy\Model\GetAutoPayResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tns\EpayPolicy\Model\GetAutoPayResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,object>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation autoPayGetAsync
     *
     * Retrieves the details of an AutoPay.
     *
     * @param  int $id The Id of the AutoPay. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the token is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPayGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function autoPayGetAsync($id, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPayGet'][0])
    {
        return $this->autoPayGetAsyncWithHttpInfo($id, $impersonation_account_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation autoPayGetAsyncWithHttpInfo
     *
     * Retrieves the details of an AutoPay.
     *
     * @param  int $id The Id of the AutoPay. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the token is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPayGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function autoPayGetAsyncWithHttpInfo($id, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPayGet'][0])
    {
        $returnType = '\Tns\EpayPolicy\Model\GetAutoPayResponseModel';
        $request = $this->autoPayGetRequest($id, $impersonation_account_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'autoPayGet'
     *
     * @param  int $id The Id of the AutoPay. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the token is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPayGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function autoPayGetRequest($id, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPayGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling autoPayGet'
            );
        }



        $resourcePath = '/api/v1/autoPay/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($impersonation_account_key !== null) {
            $headerParams['impersonationAccountKey'] = ObjectSerializer::toHeaderValue($impersonation_account_key);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation autoPayPost
     *
     * Creates an Auto Pay.
     *
     * @param  \Tns\EpayPolicy\Model\PostAutoPayRequestModel $post_auto_pay_request_model Contains the parameters for the auto pay. In the response, the Id of the created auto pay is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPayPost'] to see the possible values for this operation
     *
     * @throws \Tns\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function autoPayPost($post_auto_pay_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPayPost'][0])
    {
        $this->autoPayPostWithHttpInfo($post_auto_pay_request_model, $impersonation_account_key, $contentType);
    }

    /**
     * Operation autoPayPostWithHttpInfo
     *
     * Creates an Auto Pay.
     *
     * @param  \Tns\EpayPolicy\Model\PostAutoPayRequestModel $post_auto_pay_request_model Contains the parameters for the auto pay. In the response, the Id of the created auto pay is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPayPost'] to see the possible values for this operation
     *
     * @throws \Tns\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function autoPayPostWithHttpInfo($post_auto_pay_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPayPost'][0])
    {
        $request = $this->autoPayPostRequest($post_auto_pay_request_model, $impersonation_account_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,object>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation autoPayPostAsync
     *
     * Creates an Auto Pay.
     *
     * @param  \Tns\EpayPolicy\Model\PostAutoPayRequestModel $post_auto_pay_request_model Contains the parameters for the auto pay. In the response, the Id of the created auto pay is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPayPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function autoPayPostAsync($post_auto_pay_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPayPost'][0])
    {
        return $this->autoPayPostAsyncWithHttpInfo($post_auto_pay_request_model, $impersonation_account_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation autoPayPostAsyncWithHttpInfo
     *
     * Creates an Auto Pay.
     *
     * @param  \Tns\EpayPolicy\Model\PostAutoPayRequestModel $post_auto_pay_request_model Contains the parameters for the auto pay. In the response, the Id of the created auto pay is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPayPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function autoPayPostAsyncWithHttpInfo($post_auto_pay_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPayPost'][0])
    {
        $returnType = '';
        $request = $this->autoPayPostRequest($post_auto_pay_request_model, $impersonation_account_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'autoPayPost'
     *
     * @param  \Tns\EpayPolicy\Model\PostAutoPayRequestModel $post_auto_pay_request_model Contains the parameters for the auto pay. In the response, the Id of the created auto pay is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPayPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function autoPayPostRequest($post_auto_pay_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPayPost'][0])
    {

        // verify the required parameter 'post_auto_pay_request_model' is set
        if ($post_auto_pay_request_model === null || (is_array($post_auto_pay_request_model) && count($post_auto_pay_request_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_auto_pay_request_model when calling autoPayPost'
            );
        }



        $resourcePath = '/api/v1/autoPay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($impersonation_account_key !== null) {
            $headerParams['impersonationAccountKey'] = ObjectSerializer::toHeaderValue($impersonation_account_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_auto_pay_request_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_auto_pay_request_model));
            } else {
                $httpBody = $post_auto_pay_request_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation autoPaySearch
     *
     * Retrieves a list of auto pays based on search parameters.
     *
     * @param  \DateTime $create_date_start When filtering by create date, the earliest permitted date. Default is 30 days ago. (optional)
     * @param  \DateTime $create_date_end When filtering by create date, the latest permitted date. Default is now. (optional)
     * @param  \DateTime $cancel_date_start When filtering by cancel date, the earliest permitted date. Default is 30 days ago. (optional)
     * @param  \DateTime $cancel_date_end When filtering by cancel date, the latest permitted date. Default is now. (optional)
     * @param  int $page The page of results to return. Default is 1. (optional)
     * @param  string $page_size The size of each page. Default is 25, Maximum is 50. (optional)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the token is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPaySearch'] to see the possible values for this operation
     *
     * @throws \Tns\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tns\EpayPolicy\Model\GetAutoPaysResponseModel|array<string,object>
     */
    public function autoPaySearch($create_date_start = null, $create_date_end = null, $cancel_date_start = null, $cancel_date_end = null, $page = null, $page_size = null, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPaySearch'][0])
    {
        list($response) = $this->autoPaySearchWithHttpInfo($create_date_start, $create_date_end, $cancel_date_start, $cancel_date_end, $page, $page_size, $impersonation_account_key, $contentType);
        return $response;
    }

    /**
     * Operation autoPaySearchWithHttpInfo
     *
     * Retrieves a list of auto pays based on search parameters.
     *
     * @param  \DateTime $create_date_start When filtering by create date, the earliest permitted date. Default is 30 days ago. (optional)
     * @param  \DateTime $create_date_end When filtering by create date, the latest permitted date. Default is now. (optional)
     * @param  \DateTime $cancel_date_start When filtering by cancel date, the earliest permitted date. Default is 30 days ago. (optional)
     * @param  \DateTime $cancel_date_end When filtering by cancel date, the latest permitted date. Default is now. (optional)
     * @param  int $page The page of results to return. Default is 1. (optional)
     * @param  string $page_size The size of each page. Default is 25, Maximum is 50. (optional)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the token is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPaySearch'] to see the possible values for this operation
     *
     * @throws \Tns\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tns\EpayPolicy\Model\GetAutoPaysResponseModel|array<string,object>, HTTP status code, HTTP response headers (array of strings)
     */
    public function autoPaySearchWithHttpInfo($create_date_start = null, $create_date_end = null, $cancel_date_start = null, $cancel_date_end = null, $page = null, $page_size = null, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPaySearch'][0])
    {
        $request = $this->autoPaySearchRequest($create_date_start, $create_date_end, $cancel_date_start, $cancel_date_end, $page, $page_size, $impersonation_account_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tns\EpayPolicy\Model\GetAutoPaysResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tns\EpayPolicy\Model\GetAutoPaysResponseModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tns\EpayPolicy\Model\GetAutoPaysResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,object>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,object>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,object>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tns\EpayPolicy\Model\GetAutoPaysResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tns\EpayPolicy\Model\GetAutoPaysResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,object>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation autoPaySearchAsync
     *
     * Retrieves a list of auto pays based on search parameters.
     *
     * @param  \DateTime $create_date_start When filtering by create date, the earliest permitted date. Default is 30 days ago. (optional)
     * @param  \DateTime $create_date_end When filtering by create date, the latest permitted date. Default is now. (optional)
     * @param  \DateTime $cancel_date_start When filtering by cancel date, the earliest permitted date. Default is 30 days ago. (optional)
     * @param  \DateTime $cancel_date_end When filtering by cancel date, the latest permitted date. Default is now. (optional)
     * @param  int $page The page of results to return. Default is 1. (optional)
     * @param  string $page_size The size of each page. Default is 25, Maximum is 50. (optional)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the token is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPaySearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function autoPaySearchAsync($create_date_start = null, $create_date_end = null, $cancel_date_start = null, $cancel_date_end = null, $page = null, $page_size = null, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPaySearch'][0])
    {
        return $this->autoPaySearchAsyncWithHttpInfo($create_date_start, $create_date_end, $cancel_date_start, $cancel_date_end, $page, $page_size, $impersonation_account_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation autoPaySearchAsyncWithHttpInfo
     *
     * Retrieves a list of auto pays based on search parameters.
     *
     * @param  \DateTime $create_date_start When filtering by create date, the earliest permitted date. Default is 30 days ago. (optional)
     * @param  \DateTime $create_date_end When filtering by create date, the latest permitted date. Default is now. (optional)
     * @param  \DateTime $cancel_date_start When filtering by cancel date, the earliest permitted date. Default is 30 days ago. (optional)
     * @param  \DateTime $cancel_date_end When filtering by cancel date, the latest permitted date. Default is now. (optional)
     * @param  int $page The page of results to return. Default is 1. (optional)
     * @param  string $page_size The size of each page. Default is 25, Maximum is 50. (optional)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the token is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPaySearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function autoPaySearchAsyncWithHttpInfo($create_date_start = null, $create_date_end = null, $cancel_date_start = null, $cancel_date_end = null, $page = null, $page_size = null, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPaySearch'][0])
    {
        $returnType = '\Tns\EpayPolicy\Model\GetAutoPaysResponseModel';
        $request = $this->autoPaySearchRequest($create_date_start, $create_date_end, $cancel_date_start, $cancel_date_end, $page, $page_size, $impersonation_account_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'autoPaySearch'
     *
     * @param  \DateTime $create_date_start When filtering by create date, the earliest permitted date. Default is 30 days ago. (optional)
     * @param  \DateTime $create_date_end When filtering by create date, the latest permitted date. Default is now. (optional)
     * @param  \DateTime $cancel_date_start When filtering by cancel date, the earliest permitted date. Default is 30 days ago. (optional)
     * @param  \DateTime $cancel_date_end When filtering by cancel date, the latest permitted date. Default is now. (optional)
     * @param  int $page The page of results to return. Default is 1. (optional)
     * @param  string $page_size The size of each page. Default is 25, Maximum is 50. (optional)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the token is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autoPaySearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function autoPaySearchRequest($create_date_start = null, $create_date_end = null, $cancel_date_start = null, $cancel_date_end = null, $page = null, $page_size = null, $impersonation_account_key = null, string $contentType = self::contentTypes['autoPaySearch'][0])
    {









        $resourcePath = '/api/v1/autoPays';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $create_date_start,
            'createDateStart', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $create_date_end,
            'createDateEnd', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cancel_date_start,
            'cancelDateStart', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cancel_date_end,
            'cancelDateEnd', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($impersonation_account_key !== null) {
            $headerParams['impersonationAccountKey'] = ObjectSerializer::toHeaderValue($impersonation_account_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
