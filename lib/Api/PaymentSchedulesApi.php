<?php
/**
 * PaymentSchedulesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Tns\\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * epay3 API 1.0
 *
 * This API supports the processing of credit card and eCheck/ACH payments.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@epay3.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tns\\EpayPolicy\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Tns\\EpayPolicy\ApiException;
use Tns\\EpayPolicy\Configuration;
use Tns\\EpayPolicy\HeaderSelector;
use Tns\\EpayPolicy\ObjectSerializer;

/**
 * PaymentSchedulesApi Class Doc Comment
 *
 * @category Class
 * @package  Tns\\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentSchedulesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'paymentSchedulesCancel' => [
            'application/json',
        ],
        'paymentSchedulesGet' => [
            'application/json',
        ],
        'paymentSchedulesPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation paymentSchedulesCancel
     *
     * Cancels an active payment schedule.
     *
     * @param  string $id The public Id of the payment schedule. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentSchedulesCancel'] to see the possible values for this operation
     *
     * @throws \Tns\\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function paymentSchedulesCancel($id, $impersonation_account_key = null, string $contentType = self::contentTypes['paymentSchedulesCancel'][0])
    {
        $this->paymentSchedulesCancelWithHttpInfo($id, $impersonation_account_key, $contentType);
    }

    /**
     * Operation paymentSchedulesCancelWithHttpInfo
     *
     * Cancels an active payment schedule.
     *
     * @param  string $id The public Id of the payment schedule. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentSchedulesCancel'] to see the possible values for this operation
     *
     * @throws \Tns\\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentSchedulesCancelWithHttpInfo($id, $impersonation_account_key = null, string $contentType = self::contentTypes['paymentSchedulesCancel'][0])
    {
        $request = $this->paymentSchedulesCancelRequest($id, $impersonation_account_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,object>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation paymentSchedulesCancelAsync
     *
     * Cancels an active payment schedule.
     *
     * @param  string $id The public Id of the payment schedule. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentSchedulesCancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentSchedulesCancelAsync($id, $impersonation_account_key = null, string $contentType = self::contentTypes['paymentSchedulesCancel'][0])
    {
        return $this->paymentSchedulesCancelAsyncWithHttpInfo($id, $impersonation_account_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentSchedulesCancelAsyncWithHttpInfo
     *
     * Cancels an active payment schedule.
     *
     * @param  string $id The public Id of the payment schedule. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentSchedulesCancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentSchedulesCancelAsyncWithHttpInfo($id, $impersonation_account_key = null, string $contentType = self::contentTypes['paymentSchedulesCancel'][0])
    {
        $returnType = '';
        $request = $this->paymentSchedulesCancelRequest($id, $impersonation_account_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentSchedulesCancel'
     *
     * @param  string $id The public Id of the payment schedule. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentSchedulesCancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentSchedulesCancelRequest($id, $impersonation_account_key = null, string $contentType = self::contentTypes['paymentSchedulesCancel'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling paymentSchedulesCancel'
            );
        }



        $resourcePath = '/api/v1/paymentSchedules/{id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($impersonation_account_key !== null) {
            $headerParams['impersonationAccountKey'] = ObjectSerializer::toHeaderValue($impersonation_account_key);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentSchedulesGet
     *
     * Retrieves the details of a payment schedule.
     *
     * @param  string $id The public Id of the payment schedule. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the token is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentSchedulesGet'] to see the possible values for this operation
     *
     * @throws \Tns\\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tns\\EpayPolicy\Model\GetPaymentScheduleResponseModel|array<string,object>
     */
    public function paymentSchedulesGet($id, $impersonation_account_key = null, string $contentType = self::contentTypes['paymentSchedulesGet'][0])
    {
        list($response) = $this->paymentSchedulesGetWithHttpInfo($id, $impersonation_account_key, $contentType);
        return $response;
    }

    /**
     * Operation paymentSchedulesGetWithHttpInfo
     *
     * Retrieves the details of a payment schedule.
     *
     * @param  string $id The public Id of the payment schedule. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the token is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentSchedulesGet'] to see the possible values for this operation
     *
     * @throws \Tns\\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tns\\EpayPolicy\Model\GetPaymentScheduleResponseModel|array<string,object>, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentSchedulesGetWithHttpInfo($id, $impersonation_account_key = null, string $contentType = self::contentTypes['paymentSchedulesGet'][0])
    {
        $request = $this->paymentSchedulesGetRequest($id, $impersonation_account_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tns\\EpayPolicy\Model\GetPaymentScheduleResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tns\\EpayPolicy\Model\GetPaymentScheduleResponseModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tns\\EpayPolicy\Model\GetPaymentScheduleResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,object>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,object>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,object>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tns\\EpayPolicy\Model\GetPaymentScheduleResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tns\\EpayPolicy\Model\GetPaymentScheduleResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,object>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation paymentSchedulesGetAsync
     *
     * Retrieves the details of a payment schedule.
     *
     * @param  string $id The public Id of the payment schedule. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the token is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentSchedulesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentSchedulesGetAsync($id, $impersonation_account_key = null, string $contentType = self::contentTypes['paymentSchedulesGet'][0])
    {
        return $this->paymentSchedulesGetAsyncWithHttpInfo($id, $impersonation_account_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentSchedulesGetAsyncWithHttpInfo
     *
     * Retrieves the details of a payment schedule.
     *
     * @param  string $id The public Id of the payment schedule. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the token is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentSchedulesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentSchedulesGetAsyncWithHttpInfo($id, $impersonation_account_key = null, string $contentType = self::contentTypes['paymentSchedulesGet'][0])
    {
        $returnType = '\Tns\\EpayPolicy\Model\GetPaymentScheduleResponseModel';
        $request = $this->paymentSchedulesGetRequest($id, $impersonation_account_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentSchedulesGet'
     *
     * @param  string $id The public Id of the payment schedule. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the token is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentSchedulesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentSchedulesGetRequest($id, $impersonation_account_key = null, string $contentType = self::contentTypes['paymentSchedulesGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling paymentSchedulesGet'
            );
        }



        $resourcePath = '/api/v1/paymentSchedules/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($impersonation_account_key !== null) {
            $headerParams['impersonationAccountKey'] = ObjectSerializer::toHeaderValue($impersonation_account_key);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentSchedulesPost
     *
     * Creates a payment schedule for a delayed payment or recurring payments.
     *
     * @param  \Tns\\EpayPolicy\Model\PostPaymentScheduleRequestModel $post_payment_schedule_request_model Contains the parameters for the payment schedule. In the response, the Id of the created payment schedule is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentSchedulesPost'] to see the possible values for this operation
     *
     * @throws \Tns\\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function paymentSchedulesPost($post_payment_schedule_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['paymentSchedulesPost'][0])
    {
        $this->paymentSchedulesPostWithHttpInfo($post_payment_schedule_request_model, $impersonation_account_key, $contentType);
    }

    /**
     * Operation paymentSchedulesPostWithHttpInfo
     *
     * Creates a payment schedule for a delayed payment or recurring payments.
     *
     * @param  \Tns\\EpayPolicy\Model\PostPaymentScheduleRequestModel $post_payment_schedule_request_model Contains the parameters for the payment schedule. In the response, the Id of the created payment schedule is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentSchedulesPost'] to see the possible values for this operation
     *
     * @throws \Tns\\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentSchedulesPostWithHttpInfo($post_payment_schedule_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['paymentSchedulesPost'][0])
    {
        $request = $this->paymentSchedulesPostRequest($post_payment_schedule_request_model, $impersonation_account_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,object>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation paymentSchedulesPostAsync
     *
     * Creates a payment schedule for a delayed payment or recurring payments.
     *
     * @param  \Tns\\EpayPolicy\Model\PostPaymentScheduleRequestModel $post_payment_schedule_request_model Contains the parameters for the payment schedule. In the response, the Id of the created payment schedule is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentSchedulesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentSchedulesPostAsync($post_payment_schedule_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['paymentSchedulesPost'][0])
    {
        return $this->paymentSchedulesPostAsyncWithHttpInfo($post_payment_schedule_request_model, $impersonation_account_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentSchedulesPostAsyncWithHttpInfo
     *
     * Creates a payment schedule for a delayed payment or recurring payments.
     *
     * @param  \Tns\\EpayPolicy\Model\PostPaymentScheduleRequestModel $post_payment_schedule_request_model Contains the parameters for the payment schedule. In the response, the Id of the created payment schedule is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentSchedulesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentSchedulesPostAsyncWithHttpInfo($post_payment_schedule_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['paymentSchedulesPost'][0])
    {
        $returnType = '';
        $request = $this->paymentSchedulesPostRequest($post_payment_schedule_request_model, $impersonation_account_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentSchedulesPost'
     *
     * @param  \Tns\\EpayPolicy\Model\PostPaymentScheduleRequestModel $post_payment_schedule_request_model Contains the parameters for the payment schedule. In the response, the Id of the created payment schedule is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the transaction(s) will be processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentSchedulesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentSchedulesPostRequest($post_payment_schedule_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['paymentSchedulesPost'][0])
    {

        // verify the required parameter 'post_payment_schedule_request_model' is set
        if ($post_payment_schedule_request_model === null || (is_array($post_payment_schedule_request_model) && count($post_payment_schedule_request_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_payment_schedule_request_model when calling paymentSchedulesPost'
            );
        }



        $resourcePath = '/api/v1/paymentSchedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($impersonation_account_key !== null) {
            $headerParams['impersonationAccountKey'] = ObjectSerializer::toHeaderValue($impersonation_account_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_payment_schedule_request_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_payment_schedule_request_model));
            } else {
                $httpBody = $post_payment_schedule_request_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
