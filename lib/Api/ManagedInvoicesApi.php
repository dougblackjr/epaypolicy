<?php
/**
 * ManagedInvoicesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Tns\\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * epay3 API 1.0
 *
 * This API supports the processing of credit card and eCheck/ACH payments.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@epay3.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Tns\\EpayPolicy\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Tns\\EpayPolicy\ApiException;
use Tns\\EpayPolicy\Configuration;
use Tns\\EpayPolicy\HeaderSelector;
use Tns\\EpayPolicy\ObjectSerializer;

/**
 * ManagedInvoicesApi Class Doc Comment
 *
 * @category Class
 * @package  Tns\\EpayPolicy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ManagedInvoicesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'managedInvoicesFinance' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'managedInvoicesGet' => [
            'application/json',
        ],
        'managedInvoicesPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'managedInvoicesSearch' => [
            'application/json',
        ],
        'managedInvoicesVoid' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation managedInvoicesFinance
     *
     * Creates Managed Invoice with Financing.
     *
     * @param  string $id The public id of the managed invoice to be edited. (required)
     * @param  \Tns\\EpayPolicy\Model\PostCreateManagedInvoicesFinanceRequestModel $post_create_managed_invoices_finance_request_model The details of the Quote/Invoice to be created. In the response, the Id of the created Quote/Invoice is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the quote/invoice is being created. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesFinance'] to see the possible values for this operation
     *
     * @throws \Tns\\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function managedInvoicesFinance($id, $post_create_managed_invoices_finance_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesFinance'][0])
    {
        $this->managedInvoicesFinanceWithHttpInfo($id, $post_create_managed_invoices_finance_request_model, $impersonation_account_key, $contentType);
    }

    /**
     * Operation managedInvoicesFinanceWithHttpInfo
     *
     * Creates Managed Invoice with Financing.
     *
     * @param  string $id The public id of the managed invoice to be edited. (required)
     * @param  \Tns\\EpayPolicy\Model\PostCreateManagedInvoicesFinanceRequestModel $post_create_managed_invoices_finance_request_model The details of the Quote/Invoice to be created. In the response, the Id of the created Quote/Invoice is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the quote/invoice is being created. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesFinance'] to see the possible values for this operation
     *
     * @throws \Tns\\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function managedInvoicesFinanceWithHttpInfo($id, $post_create_managed_invoices_finance_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesFinance'][0])
    {
        $request = $this->managedInvoicesFinanceRequest($id, $post_create_managed_invoices_finance_request_model, $impersonation_account_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tns\\EpayPolicy\Model\PostCreateManagedInvoicesRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managedInvoicesFinanceAsync
     *
     * Creates Managed Invoice with Financing.
     *
     * @param  string $id The public id of the managed invoice to be edited. (required)
     * @param  \Tns\\EpayPolicy\Model\PostCreateManagedInvoicesFinanceRequestModel $post_create_managed_invoices_finance_request_model The details of the Quote/Invoice to be created. In the response, the Id of the created Quote/Invoice is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the quote/invoice is being created. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesFinance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managedInvoicesFinanceAsync($id, $post_create_managed_invoices_finance_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesFinance'][0])
    {
        return $this->managedInvoicesFinanceAsyncWithHttpInfo($id, $post_create_managed_invoices_finance_request_model, $impersonation_account_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managedInvoicesFinanceAsyncWithHttpInfo
     *
     * Creates Managed Invoice with Financing.
     *
     * @param  string $id The public id of the managed invoice to be edited. (required)
     * @param  \Tns\\EpayPolicy\Model\PostCreateManagedInvoicesFinanceRequestModel $post_create_managed_invoices_finance_request_model The details of the Quote/Invoice to be created. In the response, the Id of the created Quote/Invoice is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the quote/invoice is being created. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesFinance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managedInvoicesFinanceAsyncWithHttpInfo($id, $post_create_managed_invoices_finance_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesFinance'][0])
    {
        $returnType = '';
        $request = $this->managedInvoicesFinanceRequest($id, $post_create_managed_invoices_finance_request_model, $impersonation_account_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managedInvoicesFinance'
     *
     * @param  string $id The public id of the managed invoice to be edited. (required)
     * @param  \Tns\\EpayPolicy\Model\PostCreateManagedInvoicesFinanceRequestModel $post_create_managed_invoices_finance_request_model The details of the Quote/Invoice to be created. In the response, the Id of the created Quote/Invoice is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the quote/invoice is being created. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesFinance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managedInvoicesFinanceRequest($id, $post_create_managed_invoices_finance_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesFinance'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling managedInvoicesFinance'
            );
        }

        // verify the required parameter 'post_create_managed_invoices_finance_request_model' is set
        if ($post_create_managed_invoices_finance_request_model === null || (is_array($post_create_managed_invoices_finance_request_model) && count($post_create_managed_invoices_finance_request_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_create_managed_invoices_finance_request_model when calling managedInvoicesFinance'
            );
        }



        $resourcePath = '/api/v1/managedInvoices/{id}/finance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($impersonation_account_key !== null) {
            $headerParams['impersonationAccountKey'] = ObjectSerializer::toHeaderValue($impersonation_account_key);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_create_managed_invoices_finance_request_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_create_managed_invoices_finance_request_model));
            } else {
                $httpBody = $post_create_managed_invoices_finance_request_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managedInvoicesGet
     *
     * Retrieves the details of a managed invoice.
     *
     * @param  string $id The Id or public Id of the managed invoice. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesGet'] to see the possible values for this operation
     *
     * @throws \Tns\\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tns\\EpayPolicy\Model\GetManagedInvoiceResponseModel|array<string,object>
     */
    public function managedInvoicesGet($id, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesGet'][0])
    {
        list($response) = $this->managedInvoicesGetWithHttpInfo($id, $impersonation_account_key, $contentType);
        return $response;
    }

    /**
     * Operation managedInvoicesGetWithHttpInfo
     *
     * Retrieves the details of a managed invoice.
     *
     * @param  string $id The Id or public Id of the managed invoice. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesGet'] to see the possible values for this operation
     *
     * @throws \Tns\\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tns\\EpayPolicy\Model\GetManagedInvoiceResponseModel|array<string,object>, HTTP status code, HTTP response headers (array of strings)
     */
    public function managedInvoicesGetWithHttpInfo($id, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesGet'][0])
    {
        $request = $this->managedInvoicesGetRequest($id, $impersonation_account_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tns\\EpayPolicy\Model\GetManagedInvoiceResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tns\\EpayPolicy\Model\GetManagedInvoiceResponseModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tns\\EpayPolicy\Model\GetManagedInvoiceResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,object>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,object>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,object>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tns\\EpayPolicy\Model\GetManagedInvoiceResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tns\\EpayPolicy\Model\GetManagedInvoiceResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,object>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managedInvoicesGetAsync
     *
     * Retrieves the details of a managed invoice.
     *
     * @param  string $id The Id or public Id of the managed invoice. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managedInvoicesGetAsync($id, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesGet'][0])
    {
        return $this->managedInvoicesGetAsyncWithHttpInfo($id, $impersonation_account_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managedInvoicesGetAsyncWithHttpInfo
     *
     * Retrieves the details of a managed invoice.
     *
     * @param  string $id The Id or public Id of the managed invoice. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managedInvoicesGetAsyncWithHttpInfo($id, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesGet'][0])
    {
        $returnType = '\Tns\\EpayPolicy\Model\GetManagedInvoiceResponseModel';
        $request = $this->managedInvoicesGetRequest($id, $impersonation_account_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managedInvoicesGet'
     *
     * @param  string $id The Id or public Id of the managed invoice. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managedInvoicesGetRequest($id, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling managedInvoicesGet'
            );
        }



        $resourcePath = '/api/v1/managedInvoices/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($impersonation_account_key !== null) {
            $headerParams['impersonationAccountKey'] = ObjectSerializer::toHeaderValue($impersonation_account_key);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managedInvoicesPost
     *
     * Creates Managed Invoice.
     *
     * @param  \Tns\\EpayPolicy\Model\PostCreateManagedInvoicesRequestModel $post_create_managed_invoices_request_model The details of the Managed Invoice to be created. In the response, the Id of the created Managed Invoice is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed invoice is being created. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesPost'] to see the possible values for this operation
     *
     * @throws \Tns\\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function managedInvoicesPost($post_create_managed_invoices_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesPost'][0])
    {
        $this->managedInvoicesPostWithHttpInfo($post_create_managed_invoices_request_model, $impersonation_account_key, $contentType);
    }

    /**
     * Operation managedInvoicesPostWithHttpInfo
     *
     * Creates Managed Invoice.
     *
     * @param  \Tns\\EpayPolicy\Model\PostCreateManagedInvoicesRequestModel $post_create_managed_invoices_request_model The details of the Managed Invoice to be created. In the response, the Id of the created Managed Invoice is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed invoice is being created. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesPost'] to see the possible values for this operation
     *
     * @throws \Tns\\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function managedInvoicesPostWithHttpInfo($post_create_managed_invoices_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesPost'][0])
    {
        $request = $this->managedInvoicesPostRequest($post_create_managed_invoices_request_model, $impersonation_account_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tns\\EpayPolicy\Model\PostCreateManagedInvoicesRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managedInvoicesPostAsync
     *
     * Creates Managed Invoice.
     *
     * @param  \Tns\\EpayPolicy\Model\PostCreateManagedInvoicesRequestModel $post_create_managed_invoices_request_model The details of the Managed Invoice to be created. In the response, the Id of the created Managed Invoice is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed invoice is being created. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managedInvoicesPostAsync($post_create_managed_invoices_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesPost'][0])
    {
        return $this->managedInvoicesPostAsyncWithHttpInfo($post_create_managed_invoices_request_model, $impersonation_account_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managedInvoicesPostAsyncWithHttpInfo
     *
     * Creates Managed Invoice.
     *
     * @param  \Tns\\EpayPolicy\Model\PostCreateManagedInvoicesRequestModel $post_create_managed_invoices_request_model The details of the Managed Invoice to be created. In the response, the Id of the created Managed Invoice is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed invoice is being created. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managedInvoicesPostAsyncWithHttpInfo($post_create_managed_invoices_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesPost'][0])
    {
        $returnType = '';
        $request = $this->managedInvoicesPostRequest($post_create_managed_invoices_request_model, $impersonation_account_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managedInvoicesPost'
     *
     * @param  \Tns\\EpayPolicy\Model\PostCreateManagedInvoicesRequestModel $post_create_managed_invoices_request_model The details of the Managed Invoice to be created. In the response, the Id of the created Managed Invoice is the last part of the URI in the location header attribute. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed invoice is being created. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managedInvoicesPostRequest($post_create_managed_invoices_request_model, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesPost'][0])
    {

        // verify the required parameter 'post_create_managed_invoices_request_model' is set
        if ($post_create_managed_invoices_request_model === null || (is_array($post_create_managed_invoices_request_model) && count($post_create_managed_invoices_request_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_create_managed_invoices_request_model when calling managedInvoicesPost'
            );
        }



        $resourcePath = '/api/v1/managedInvoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($impersonation_account_key !== null) {
            $headerParams['impersonationAccountKey'] = ObjectSerializer::toHeaderValue($impersonation_account_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_create_managed_invoices_request_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_create_managed_invoices_request_model));
            } else {
                $httpBody = $post_create_managed_invoices_request_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managedInvoicesSearch
     *
     * Retrieves a list of Managed invoices based on search parameters.
     *
     * @param  string $payer_name When filtering by the payer&#39;s name, the name or partial name to match. (optional)
     * @param  string $created_by When filtering by the creator&#39;s name, the name or partial name to match. (optional)
     * @param  \DateTime $due_date_from When filtering by due date, the earliest permitted date. Default is null. (optional)
     * @param  \DateTime $due_date_to When filtering by due date, the latest permitted date. Default is null. (optional)
     * @param  string $managed_invoice_search_status_type The type of managed invoice status search to perform. Default is open. (optional)
     * @param  string $page The page of results to return. Default is 1. (optional)
     * @param  string $page_size The size of each page. Default is 25, Maximum is 50. (optional)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed invoice is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesSearch'] to see the possible values for this operation
     *
     * @throws \Tns\\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Tns\\EpayPolicy\Model\GetManagedInvoicesResponseModel|array<string,object>
     */
    public function managedInvoicesSearch($payer_name = null, $created_by = null, $due_date_from = null, $due_date_to = null, $managed_invoice_search_status_type = null, $page = null, $page_size = null, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesSearch'][0])
    {
        list($response) = $this->managedInvoicesSearchWithHttpInfo($payer_name, $created_by, $due_date_from, $due_date_to, $managed_invoice_search_status_type, $page, $page_size, $impersonation_account_key, $contentType);
        return $response;
    }

    /**
     * Operation managedInvoicesSearchWithHttpInfo
     *
     * Retrieves a list of Managed invoices based on search parameters.
     *
     * @param  string $payer_name When filtering by the payer&#39;s name, the name or partial name to match. (optional)
     * @param  string $created_by When filtering by the creator&#39;s name, the name or partial name to match. (optional)
     * @param  \DateTime $due_date_from When filtering by due date, the earliest permitted date. Default is null. (optional)
     * @param  \DateTime $due_date_to When filtering by due date, the latest permitted date. Default is null. (optional)
     * @param  string $managed_invoice_search_status_type The type of managed invoice status search to perform. Default is open. (optional)
     * @param  string $page The page of results to return. Default is 1. (optional)
     * @param  string $page_size The size of each page. Default is 25, Maximum is 50. (optional)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed invoice is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesSearch'] to see the possible values for this operation
     *
     * @throws \Tns\\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Tns\\EpayPolicy\Model\GetManagedInvoicesResponseModel|array<string,object>, HTTP status code, HTTP response headers (array of strings)
     */
    public function managedInvoicesSearchWithHttpInfo($payer_name = null, $created_by = null, $due_date_from = null, $due_date_to = null, $managed_invoice_search_status_type = null, $page = null, $page_size = null, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesSearch'][0])
    {
        $request = $this->managedInvoicesSearchRequest($payer_name, $created_by, $due_date_from, $due_date_to, $managed_invoice_search_status_type, $page, $page_size, $impersonation_account_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Tns\\EpayPolicy\Model\GetManagedInvoicesResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Tns\\EpayPolicy\Model\GetManagedInvoicesResponseModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Tns\\EpayPolicy\Model\GetManagedInvoicesResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('array<string,object>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,object>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,object>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Tns\\EpayPolicy\Model\GetManagedInvoicesResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tns\\EpayPolicy\Model\GetManagedInvoicesResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,object>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managedInvoicesSearchAsync
     *
     * Retrieves a list of Managed invoices based on search parameters.
     *
     * @param  string $payer_name When filtering by the payer&#39;s name, the name or partial name to match. (optional)
     * @param  string $created_by When filtering by the creator&#39;s name, the name or partial name to match. (optional)
     * @param  \DateTime $due_date_from When filtering by due date, the earliest permitted date. Default is null. (optional)
     * @param  \DateTime $due_date_to When filtering by due date, the latest permitted date. Default is null. (optional)
     * @param  string $managed_invoice_search_status_type The type of managed invoice status search to perform. Default is open. (optional)
     * @param  string $page The page of results to return. Default is 1. (optional)
     * @param  string $page_size The size of each page. Default is 25, Maximum is 50. (optional)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed invoice is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managedInvoicesSearchAsync($payer_name = null, $created_by = null, $due_date_from = null, $due_date_to = null, $managed_invoice_search_status_type = null, $page = null, $page_size = null, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesSearch'][0])
    {
        return $this->managedInvoicesSearchAsyncWithHttpInfo($payer_name, $created_by, $due_date_from, $due_date_to, $managed_invoice_search_status_type, $page, $page_size, $impersonation_account_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managedInvoicesSearchAsyncWithHttpInfo
     *
     * Retrieves a list of Managed invoices based on search parameters.
     *
     * @param  string $payer_name When filtering by the payer&#39;s name, the name or partial name to match. (optional)
     * @param  string $created_by When filtering by the creator&#39;s name, the name or partial name to match. (optional)
     * @param  \DateTime $due_date_from When filtering by due date, the earliest permitted date. Default is null. (optional)
     * @param  \DateTime $due_date_to When filtering by due date, the latest permitted date. Default is null. (optional)
     * @param  string $managed_invoice_search_status_type The type of managed invoice status search to perform. Default is open. (optional)
     * @param  string $page The page of results to return. Default is 1. (optional)
     * @param  string $page_size The size of each page. Default is 25, Maximum is 50. (optional)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed invoice is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managedInvoicesSearchAsyncWithHttpInfo($payer_name = null, $created_by = null, $due_date_from = null, $due_date_to = null, $managed_invoice_search_status_type = null, $page = null, $page_size = null, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesSearch'][0])
    {
        $returnType = '\Tns\\EpayPolicy\Model\GetManagedInvoicesResponseModel';
        $request = $this->managedInvoicesSearchRequest($payer_name, $created_by, $due_date_from, $due_date_to, $managed_invoice_search_status_type, $page, $page_size, $impersonation_account_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managedInvoicesSearch'
     *
     * @param  string $payer_name When filtering by the payer&#39;s name, the name or partial name to match. (optional)
     * @param  string $created_by When filtering by the creator&#39;s name, the name or partial name to match. (optional)
     * @param  \DateTime $due_date_from When filtering by due date, the earliest permitted date. Default is null. (optional)
     * @param  \DateTime $due_date_to When filtering by due date, the latest permitted date. Default is null. (optional)
     * @param  string $managed_invoice_search_status_type The type of managed invoice status search to perform. Default is open. (optional)
     * @param  string $page The page of results to return. Default is 1. (optional)
     * @param  string $page_size The size of each page. Default is 25, Maximum is 50. (optional)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed invoice is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managedInvoicesSearchRequest($payer_name = null, $created_by = null, $due_date_from = null, $due_date_to = null, $managed_invoice_search_status_type = null, $page = null, $page_size = null, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesSearch'][0])
    {










        $resourcePath = '/api/v1/managedInvoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payer_name,
            'payerName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_by,
            'createdBy', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $due_date_from,
            'dueDateFrom', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $due_date_to,
            'dueDateTo', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $managed_invoice_search_status_type,
            'managedInvoiceSearchStatusType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($impersonation_account_key !== null) {
            $headerParams['impersonationAccountKey'] = ObjectSerializer::toHeaderValue($impersonation_account_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation managedInvoicesVoid
     *
     * Processes a void of a managed invoice.
     *
     * @param  string $id The Id or public Id of the managed invoice to be voided. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed invoice is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesVoid'] to see the possible values for this operation
     *
     * @throws \Tns\\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function managedInvoicesVoid($id, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesVoid'][0])
    {
        $this->managedInvoicesVoidWithHttpInfo($id, $impersonation_account_key, $contentType);
    }

    /**
     * Operation managedInvoicesVoidWithHttpInfo
     *
     * Processes a void of a managed invoice.
     *
     * @param  string $id The Id or public Id of the managed invoice to be voided. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed invoice is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesVoid'] to see the possible values for this operation
     *
     * @throws \Tns\\EpayPolicy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function managedInvoicesVoidWithHttpInfo($id, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesVoid'][0])
    {
        $request = $this->managedInvoicesVoidRequest($id, $impersonation_account_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tns\\EpayPolicy\Model\PostVoidManagedInvoiceResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation managedInvoicesVoidAsync
     *
     * Processes a void of a managed invoice.
     *
     * @param  string $id The Id or public Id of the managed invoice to be voided. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed invoice is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesVoid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managedInvoicesVoidAsync($id, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesVoid'][0])
    {
        return $this->managedInvoicesVoidAsyncWithHttpInfo($id, $impersonation_account_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation managedInvoicesVoidAsyncWithHttpInfo
     *
     * Processes a void of a managed invoice.
     *
     * @param  string $id The Id or public Id of the managed invoice to be voided. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed invoice is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesVoid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function managedInvoicesVoidAsyncWithHttpInfo($id, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesVoid'][0])
    {
        $returnType = '';
        $request = $this->managedInvoicesVoidRequest($id, $impersonation_account_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'managedInvoicesVoid'
     *
     * @param  string $id The Id or public Id of the managed invoice to be voided. (required)
     * @param  string $impersonation_account_key The key that allows impersonation of another account for which the managed invoice is being processed. Only specify a value if the account being impersonated is different from the account that is submitting this request. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['managedInvoicesVoid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function managedInvoicesVoidRequest($id, $impersonation_account_key = null, string $contentType = self::contentTypes['managedInvoicesVoid'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling managedInvoicesVoid'
            );
        }



        $resourcePath = '/api/v1/managedInvoices/{id}/void';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($impersonation_account_key !== null) {
            $headerParams['impersonationAccountKey'] = ObjectSerializer::toHeaderValue($impersonation_account_key);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
